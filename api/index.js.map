{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/.pnpm/@remix-run+dev@1.4.3_react-dom@17.0.2+react@17.0.2/node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\root.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar.tsx", "../app/components/navBar.tsx", "../app/components/formButton.tsx", "../app/server/session.server.ts", "../app/utils/utils.ts", "../app/server/supabase.server.ts", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user.tweets.$tweetId.tsx", "../app/components/mainTweet.tsx", "../app/components/texterTextArea.tsx", "../app/components/tweet.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\edit-profile.tsx", "../app/components/texterInput.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\bookmarks.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user\\tweets\\$tweetId\\bookmark.ts", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user\\tweets\\$tweetId\\like.ts", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user\\with_replies.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user\\index.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\$user\\likes.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\__navbar\\index.tsx", "../app/components/sendTweet.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\logout.tsx", "C:\\Users\\nivek\\Documents\\work\\texter\\app\\routes\\join.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport styles from \"~/styles/app.css\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Texter\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\n// <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n//<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n//<link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans:wght@700&display=swap\" rel=\"stylesheet\">\n\nexport const links = () => {\n  return [\n    { rel: \"stylesheet\", href: styles },\n    { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n    { rel: \"preconnect\", href: \"https://fonts.gstatic.com\", crossOrigin: true },\n    {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400;700&display=swap\",\n    },\n    {\n      rel: \"icon\",\n      type: \"image/png\",\n      href: \"/logo.png\",\n    },\n  ];\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body\n        className=\"h-full text-white font-sans \"\n        style={{ backgroundColor: \"hsl(0,0%,0%)\" }}\n      >\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import type { LoaderFunction } from \"@remix-run/node\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport { Outlet, useLoaderData } from \"@remix-run/react\";\r\nimport { NavBar } from \"~/components/navBar\";\r\nimport {\r\n  getUserId,\r\n  getUserSession,\r\n  sessionStorage,\r\n} from \"~/server/session.server\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport { getUserOfUserId } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\n\r\ntype LoaderData = {\r\n  userName: string;\r\n};\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const userId = await getUserId(request);\r\n\r\n  if (userId === null) {\r\n    return redirect(AppUrl.join);\r\n  }\r\n\r\n  const user = await getUserOfUserId<Pick<DbUser, \"user_name\">>(\r\n    userId,\r\n    \"user_name\"\r\n  );\r\n\r\n  if (user === null) {\r\n    // There is no user with given userId, therefore logout out the user\r\n\r\n    const userSession = await getUserSession(request);\r\n\r\n    return redirect(AppUrl.join, {\r\n      headers: {\r\n        \"Set-Cookie\": await sessionStorage.destroySession(userSession),\r\n      },\r\n    });\r\n  }\r\n\r\n  return json<LoaderData>({ userName: user.user_name });\r\n};\r\n\r\nexport default function Index() {\r\n  const { userName } = useLoaderData<LoaderData>();\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      <div className=\"min-h-screen ml-auto mt-3 w-[280px] pr-6 border-r border-gray-600\">\r\n        <div className=\"sticky top-4\">\r\n          <NavBar userName={userName} />\r\n        </div>\r\n      </div>\r\n      <div className=\"mr-auto w-[800px]\">\r\n        <Outlet />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "import { GrTwitter } from \"react-icons/gr\";\r\nimport { RiHome4Line } from \"react-icons/ri\";\r\nimport { BsBookmark } from \"react-icons/bs\";\r\nimport { FaUserAlt } from \"react-icons/fa\";\r\nimport { FormButton } from \"./formButton\";\r\nimport { Link } from \"@remix-run/react\";\r\n\r\nexport type NavBarProps = {\r\n  userName: string;\r\n};\r\n\r\nexport const NavBar = ({ userName }: NavBarProps) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-y-5\">\r\n      <GrTwitter size=\"30px\" className=\"mb-3 ml-4\" />\r\n      <SideBarOption icons={<RiHome4Line size=\"30px\" />} text=\"Home\" to=\"/\" />\r\n\r\n      <SideBarOption\r\n        icons={<BsBookmark size=\"27px\" className=\"ml-1\" />}\r\n        text=\"Bookmarks\"\r\n        to=\"/bookmarks\"\r\n      />\r\n      <SideBarOption\r\n        icons={<FaUserAlt size=\"30px\" className=\"ml-1\" />}\r\n        text=\"Profile\"\r\n        to={`/${userName}`}\r\n      />\r\n      <div className=\"ml-4\">\r\n        <FormButton\r\n          action={`/logout`}\r\n          method=\"post\"\r\n          navigate={false}\r\n          className=\"w-full border-inherit border border-gray-300 hover:border-texter-blue rounded-full px-8 py-3 text-texter-blue\"\r\n        >\r\n          Log out\r\n        </FormButton>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype SideBarOptionProps = {\r\n  icons: React.ReactElement;\r\n  text: string;\r\n  to: string;\r\n};\r\n\r\nconst SideBarOption = ({ icons, text, to }: SideBarOptionProps) => {\r\n  return (\r\n    <Link\r\n      className=\"flex items-center gap-x-4 hover:bg-gray-900 rounded-full py-3 px-4\"\r\n      to={to}\r\n    >\r\n      {icons}\r\n      <span className=\"text-lg\">{text}</span>\r\n    </Link>\r\n  );\r\n};\r\n", "import { Form, useFetcher } from \"@remix-run/react\";\r\nimport React from \"react\";\r\n\r\nexport type FormButtonProps = {\r\n  action?: string;\r\n  method?: \"get\" | \"post\";\r\n  navigate?: boolean;\r\n\r\n  children: React.ReactNode;\r\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\n/**\r\n * Renders a button inside a remix `<Form>`\r\n * ```tsx\r\n * <Form action={...} method={...}>\r\n *      <button {...}> {children} </button>\r\n * </Form>\r\n * ```\r\n *\r\n * @param action - used to set the url of request, same as `action` in `<Form></Form>`\r\n * @param method - used to set the method of request, same as `method` in `<Form></Form>`\r\n */\r\nexport const FormButton = ({\r\n  children,\r\n  action,\r\n  method,\r\n  navigate,\r\n  ...props\r\n}: FormButtonProps) => {\r\n  const fetcher = useFetcher();\r\n\r\n  return (\r\n    <>\r\n      {navigate ? (\r\n        <Form className=\"contents\" action={action} method={method}>\r\n          <button {...props}>{children} </button>\r\n        </Form>\r\n      ) : (\r\n        <fetcher.Form className=\"contents\" action={action} method={method}>\r\n          <button {...props}>{children} </button>\r\n        </fetcher.Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n", "import { createCookieSessionStorage } from \"@remix-run/node\";\r\nimport { getEnvVar } from \"~/utils/utils\";\r\n\r\n/**\r\n * Creates a session storage which can be used to store data in\r\n * the session including userId\r\n *\r\n * @see {@link https://remix.run/docs/en/v1/api/remix#createsessionstorage  Session Storage docs}\r\n */\r\n\r\nexport const sessionStorage = createCookieSessionStorage({\r\n  cookie: {\r\n    name: \"texter_session\",\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    secrets: [getEnvVar(\"SESSION_SECRET\")],\r\n    sameSite: \"lax\",\r\n    path: \"/\",\r\n    maxAge: 60 * 60 * 24 * 30,\r\n    httpOnly: true,\r\n  },\r\n});\r\n\r\n/**\r\n * Gets the session object from the request\r\n *\r\n *\r\n * @param request - The request object\r\n * @returns the session object associated with the request\r\n */\r\nexport const getUserSession = async (request: Request) => {\r\n  const session = await sessionStorage.getSession(\r\n    request.headers.get(\"Cookie\")\r\n  );\r\n\r\n  return session;\r\n};\r\n\r\n/**\r\n * Gets the userId from the user session if available\r\n *\r\n *\r\n * @param request - The request object\r\n * @returns If there is userId in the session, return the userId, otherwise return null\r\n */\r\nexport const getUserId = async (request: Request) => {\r\n  const session = await getUserSession(request);\r\n\r\n  const userId = session.get(\"userId\");\r\n\r\n  if (!userId || typeof userId !== \"string\") {\r\n    return null;\r\n  }\r\n\r\n  return userId;\r\n};\r\n", "/**\r\n * Gets the environment variable from `process.env`, if there is no\r\n * variable with that name throws error\r\n *\r\n * @param name - Environment variable name\r\n * @returns The environment variable value\r\n *\r\n * @example\r\n * ```ts\r\n * const available = getEnvVar(\"AVAILABLE_VAR\"); // Returns value in string\r\n * const notAvailable = getEnvVar(\"NOT_AVAILABLE_VAR\"); // throws Error(\"Environment variable NOT_AVAILABLE_VAR is not defined\")\r\n * ```\r\n */\r\nexport const getEnvVar = (name: string) => {\r\n  const value = process.env[name];\r\n\r\n  if (value === undefined) {\r\n    throw new Error(`Environment variable ${name} is not defined`);\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\ntype InvariantType = (\r\n  condition: unknown,\r\n  message: string | (() => string)\r\n) => asserts condition;\r\n\r\n/**\r\n * Function which asserts the condition to be true, if not throws with\r\n * message passed as second argument. helpful in narrowing down the type\r\n *\r\n * @example\r\n * ```ts\r\n * const boo : string | null = null;\r\n * const foo : string | null = \"foo\";\r\n *\r\n * invariant(boo, \"boo is null\"); // throw Error(\"boo is null\");\r\n * invariant(foo); // Will not throw\r\n *\r\n * const firstChar = foo.charAt(0); // type of foo is narrowed to string\r\n * ```\r\n *\r\n * @param condition - Condition to check\r\n * @param message - Message to show when the condition fails\r\n * @returns\r\n */\r\nexport const invariant: InvariantType = (\r\n  condition: unknown,\r\n  message: string | (() => string) = \"Invariant failed\"\r\n): asserts condition => {\r\n  if (condition) {\r\n    return;\r\n  }\r\n\r\n  const errorMessage = typeof message === \"string\" ? message : message();\r\n\r\n  throw new Error(errorMessage);\r\n};\r\n\r\n/**\r\n * Trims and replaces all whitespace character with single whitespace\r\n *\r\n *\r\n * @param s - string to be condensed\r\n * @returns newly created condensed string\r\n */\r\nexport const condenseString = (s: string) => {\r\n  return s.trim().replace(/\\s+/g, \" \").trim();\r\n};\r\n", "import type { PostgrestResponse } from \"@supabase/supabase-js\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport type { Readable } from \"stream\";\r\nimport { getEnvVar } from \"~/utils/utils\";\r\n\r\nexport const supabase = createClient(\r\n  process.env.NODE_ENV === \"production\"\r\n    ? getEnvVar(\"SUPABASE_PROD_API_URL\")\r\n    : getEnvVar(\"SUPABASE_LOCAL_API_URL\"),\r\n  process.env.NODE_ENV === \"production\"\r\n    ? getEnvVar(\"SUPABASE_PROD_SERVICE_KEY\")\r\n    : getEnvVar(\"SUPABASE_LOCAL_SERVICE_KEY\")\r\n);\r\n\r\n// export const supabase = createClient(\r\n//   getEnvVar(\"SUPABASE_PROD_API_URL\"),\r\n//   getEnvVar(\"SUPABASE_PROD_SERVICE_KEY\")\r\n// );\r\n\r\n/**\r\n * Represents `users` table in the database\r\n *\r\n */\r\nexport type DbUser = {\r\n  user_id: string;\r\n  user_name: string;\r\n  password_hash: string;\r\n  bio: string | null;\r\n  profile_picture_url: string | null;\r\n  background_picture_url: string | null;\r\n};\r\n\r\n/**\r\n * Represents `tweets` table in the database\r\n */\r\n\r\nexport type DbTweets = {\r\n  tweet_id: string;\r\n  message: string;\r\n  user_id: string;\r\n  created_at: string;\r\n  replied_to: string | null;\r\n  replies: string[];\r\n};\r\n\r\n/**\r\n * Represents `user_liked_tweet` table in the tablebase\r\n */\r\n\r\nexport type DbUserLikedTweet = {\r\n  user_id: string;\r\n  tweet_id: string;\r\n  created_at: string;\r\n};\r\n\r\n/**\r\n * Represents `user_bookmarked_tweet` table in the database\r\n */\r\n\r\nexport type DbUserBookmarkedTweet = {\r\n  user_id: string;\r\n  tweet_id: string;\r\n  created_at: string;\r\n};\r\n\r\n/**\r\n * Each tweet is belongs to a user, through this function\r\n * you can get userName of the user who send that tweet\r\n *\r\n * @param tweetId - `tweet_id` of the tweet\r\n * @returns if there is a user who sent that tweet then it returns the `user_name` of that user or else\r\n * it returns `null`\r\n */\r\nexport const getTweetUserName = async (tweetId: string) => {\r\n  const tweetResult = (await supabase\r\n    .from<DbTweets>(\"tweets\")\r\n    .select(\r\n      `users!fk_user_id (\r\n      user_name\r\n    )`\r\n    )\r\n    .eq(\"tweet_id\", tweetId)) as PostgrestResponse<{\r\n    users: { user_name: string };\r\n  }>;\r\n\r\n  if (tweetResult.error || tweetResult.data.length === 0) {\r\n    // There is no user who sent that tweet\r\n    // This is possible when the tweet_id is not valid\r\n    return null;\r\n  }\r\n\r\n  const user = tweetResult.data[0].users; // There can be only one user who sent that tweet\r\n\r\n  return user.user_name;\r\n};\r\n\r\n/**\r\n *\r\n * Get user with the given username\r\n *\r\n * @param userName - `user_name` of the user\r\n * @param selectQuery - Optional select query to be used, default is `\"*\"`\r\n * @returns if there is user with the given `user_name`, returns the user object based on selectQuery, else returns `null`\r\n */\r\nexport const getUserOfUserName = async <T>(\r\n  userName: string,\r\n  selectQuery: string = \"*\"\r\n) => {\r\n  const query = await supabase\r\n    .from<DbUser>(\"users\")\r\n    .select(selectQuery)\r\n    .eq(\"user_name\", userName);\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is no user with this userName\r\n    return null;\r\n  }\r\n\r\n  const user = query.data[0]; // There can be only one user for a username\r\n\r\n  return user as unknown as T;\r\n};\r\n\r\n/**\r\n *\r\n * Get user with the given user_id\r\n *\r\n * @param userId - `userId` of the user\r\n * @param selectQuery - Optional select query to be used, default is `\"*\"`\r\n * @returns if there is user with the given `user_id`, returns the user object based on selectQuery, else returns `null`\r\n */\r\nexport const getUserOfUserId = async <T>(userId: string, selectQuery = \"*\") => {\r\n  const query = await supabase\r\n    .from<DbUser>(\"users\")\r\n    .select(selectQuery)\r\n    .eq(\"user_id\", userId);\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is no user with this userName\r\n    return null;\r\n  }\r\n\r\n  const user = query.data[0]; // There can be only one user for a username\r\n\r\n  return user as unknown as T;\r\n};\r\n\r\nexport type GetOneTweetFromUserArgs = {\r\n  userId: string;\r\n  tweetId: string;\r\n  selectQuery: string;\r\n};\r\n/**\r\n *\r\n * Get one tweet from a user\r\n *\r\n * @param userId - `user_id` of the user\r\n * @param tweetId - `tweet_id` of the tweet\r\n * @param selectQuery - Optional select query to be used, default is `\"*\"`\r\n * @returns if there is tweet with the given `user_id` and `tweet_id`, returns the\r\n * `tweet object` based on `selectQuery`, else returns `null`\r\n */\r\nexport const getOneTweetFromUser = async <T>({\r\n  selectQuery = \"*\",\r\n  tweetId,\r\n  userId,\r\n}: GetOneTweetFromUserArgs) => {\r\n  const tweetResult = await supabase\r\n    .from<DbTweets>(\"tweets\")\r\n    .select(selectQuery)\r\n    .eq(\"user_id\", userId)\r\n    .eq(\"tweet_id\", tweetId);\r\n\r\n  if (tweetResult.error || tweetResult.data.length === 0) {\r\n    // There is no tweet with specified user_id and tweet_id\r\n    return null;\r\n  }\r\n\r\n  const tweet = tweetResult.data[0]; // There should be only on tweet with specified tweet id\r\n\r\n  return tweet as unknown as T;\r\n};\r\n\r\nexport type GetALlTweetsFromUserArgs = {\r\n  userId: string;\r\n  selectQuery: string;\r\n  includeReplies?: boolean;\r\n};\r\n\r\n/**\r\n *\r\n * Get all tweet from a user in descending order of `created_at`\r\n *\r\n * @param userId - `user_id` of the user\r\n * @param selectQuery - Optional select query to be used, default is `\"*\"`\r\n * @param includeReplies - Optional boolean to include replies from the user, default is `true`\r\n * @returns if there is tweet with the given `user_id` and `tweet_id`, returns the\r\n * `tweet object` based on `selectQuery`, else returns `null`\r\n */\r\nexport const getAllTweetsFromUser = async <T>({\r\n  selectQuery = \"*\",\r\n  userId,\r\n  includeReplies = true,\r\n}: GetALlTweetsFromUserArgs) => {\r\n  let tweetQuery = supabase\r\n    .from<DbTweets>(\"tweets\")\r\n    .select(selectQuery)\r\n    .eq(\"user_id\", userId)\r\n    .order(\"created_at\", { ascending: false });\r\n\r\n  if (!includeReplies) {\r\n    tweetQuery = tweetQuery.is(\"replied_to\", null);\r\n  }\r\n\r\n  const tweetResult = await tweetQuery;\r\n\r\n  if (tweetResult.error) {\r\n    // There is some error in getting tweetst\r\n    return null;\r\n  }\r\n\r\n  return tweetResult.data as unknown as T[];\r\n};\r\n\r\nexport type GetTweetArgs = {\r\n  selectQuery: string;\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n *\r\n * Get tweet with  tweet_id\r\n *\r\n * @param tweetId - `tweet_id` of the tweet\r\n * @param selectQuery - Optional select query to be used, default is `\"*\"`\r\n * @returns if there is tweet with the given `user_id` and `tweet_id`, returns the\r\n * `tweet object` based on `selectQuery`, else returns `null`\r\n */\r\nexport const getTweet = async <T>({\r\n  selectQuery = \"*\",\r\n  tweetId,\r\n}: GetTweetArgs) => {\r\n  const tweetResult = await supabase\r\n    .from<DbTweets>(\"tweets\")\r\n    .select(selectQuery)\r\n    .eq(\"tweet_id\", tweetId);\r\n\r\n  if (tweetResult.error || tweetResult.data.length === 0) {\r\n    // There is no tweet with specified tweet_id\r\n    return null;\r\n  }\r\n\r\n  const tweet = tweetResult.data[0]; // There should be only on tweet with specified tweet id\r\n\r\n  return tweet as unknown as T;\r\n};\r\n\r\nexport type GetLatestTweetsArgs = {\r\n  count: number;\r\n  selectQuery: string;\r\n};\r\n\r\n/**\r\n * Returns the latest tweets from the database\r\n *\r\n *\r\n * @param count - count of tweets to be returned\r\n * @param selectQuery - Select query to be used while sending request\r\n * @returns `Tweet[]` based on query if the opeartion is successfull, else returns null\r\n */\r\nexport const getLatestTweets = async <T>({\r\n  count,\r\n  selectQuery,\r\n}: GetLatestTweetsArgs) => {\r\n  const query = await supabase\r\n    .from<DbTweets>(\"tweets\")\r\n    .select(selectQuery)\r\n    .order(\"created_at\", { ascending: false })\r\n    .limit(count);\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is some error with the select query\r\n    return null;\r\n  }\r\n\r\n  return query.data as unknown as T[];\r\n};\r\n\r\nexport type InsertUserWithPasswordArgs = {\r\n  userName: string;\r\n  passwordHash: string;\r\n};\r\n\r\n/**\r\n * Inserts the user with the given username and passwordHash to the db\r\n *\r\n * @param passwordHash - `password_hash` of the user\r\n * @param userName - user_name of the user\r\n * @return if the user is inserted, returns the `user_id`, else returns `null`\r\n */\r\n\r\nexport const insertUserWithPassword = async ({\r\n  passwordHash,\r\n  userName,\r\n}: InsertUserWithPasswordArgs) => {\r\n  const insertResult = await supabase\r\n    .from<DbUser>(\"users\")\r\n    .insert({ user_name: userName, password_hash: passwordHash });\r\n\r\n  if (insertResult.error || insertResult.data.length === 0) {\r\n    // There is already a user with the given userName\r\n    return null;\r\n  }\r\n\r\n  const user = insertResult.data[0]; // We have added only one user\r\n  return user.user_id;\r\n};\r\n\r\nexport type InsertTweetFromUserArgs = {\r\n  userId: string;\r\n  message: string;\r\n};\r\n\r\n/**\r\n *\r\n * Inserts the `tweet` not a reply to any other tweet in the db\r\n *\r\n * @param userId - UserId of the user who made the tweet\r\n * @param message - message of the tweet\r\n * @returns if the tweet is inserted, returns the tweet object, else returns `null`\r\n */\r\n\r\nexport const insertTweetFromUser = async ({\r\n  userId,\r\n  message,\r\n}: InsertTweetFromUserArgs) => {\r\n  const query = await supabase\r\n    .from<DbTweets>(\"tweets\")\r\n    .insert({ user_id: userId, message: message });\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // Some error happened while adding tweet\r\n    // maybe there is no user with that user_id\r\n    return null;\r\n  }\r\n\r\n  const tweet = query.data[0]; // We have added only on tweet\r\n\r\n  return tweet;\r\n};\r\n\r\ntype InsertTweetReplyFromUserArgs = {\r\n  userId: string;\r\n  message: string;\r\n  repliedTo: string;\r\n};\r\n\r\n/**\r\n * Inserts a reply from the user to the tweet\r\n *\r\n *\r\n * @param message - Reply message\r\n * @param repliedTo - TweetId of the tweet to which the reply is to be made\r\n * @param userId - UserId of the user who made the reply\r\n * @returns if the tweet is inserted, returns `undefined`, else returns `null`\r\n */\r\nexport const insertTweetReplyFromUser = async ({\r\n  message,\r\n  repliedTo,\r\n  userId,\r\n}: InsertTweetReplyFromUserArgs) => {\r\n  const addTweet = await supabase.from<DbTweets>(\"tweets\").insert({\r\n    user_id: userId,\r\n    replied_to: repliedTo,\r\n    message: message,\r\n  });\r\n\r\n  if (addTweet.error || addTweet.data.length === 0) {\r\n    // There is some error while adding tweet\r\n    return null;\r\n  }\r\n\r\n  const tweet = addTweet.data[0]; // We have added only on tweet\r\n\r\n  const addTweetToRepliesList = await supabase.rpc<void>(\"append_to_replies\", {\r\n    add_replies_to: repliedTo,\r\n    replied_tweet_id: tweet.tweet_id,\r\n  });\r\n\r\n  if (addTweetToRepliesList.error) {\r\n    // There is some error while adding tweet to replies list\r\n    return null;\r\n  }\r\n};\r\n\r\ntype UserLikedTweetArgs = {\r\n  userId: string;\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n *\r\n * Adds to the db that the user with the `userId` has liked the\r\n * tweet with the `tweetId`\r\n *\r\n * @param userId - `user_id` of the user who have liked the tweet\r\n * @param tweetId - `tweet_id` of the tweet which got liked\r\n * @returns if the operation is successfull returns `DbUserLikedTweet` object else returns\r\n * `null`\r\n */\r\nexport const userLikedTweet = async ({\r\n  userId,\r\n  tweetId,\r\n}: UserLikedTweetArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserLikedTweet>(\"user_liked_tweet\")\r\n    .insert({ user_id: userId, tweet_id: tweetId });\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is some error while adding tweet\r\n    return null;\r\n  }\r\n\r\n  const like = query.data[0]; // Only one like is added\r\n\r\n  return like;\r\n};\r\n\r\n/**\r\n *\r\n * Removes the like user has given to the tweet\r\n *\r\n * @param userId - `user_id` of the user who have unLiked the tweet\r\n * @param tweetId - `tweet_id` of the tweet which got unLiked\r\n * @returns if the operation is successfull returns `DbUserLikedTweet` object else returns\r\n * `null`\r\n */\r\nexport const userUnLikedTweet = async ({\r\n  userId,\r\n  tweetId,\r\n}: UserLikedTweetArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserLikedTweet>(\"user_liked_tweet\")\r\n    .delete()\r\n    .eq(\"user_id\", userId)\r\n    .eq(\"tweet_id\", tweetId);\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is some error while adding tweet\r\n    return null;\r\n  }\r\n\r\n  const like = query.data[0]; // Only one like is added\r\n\r\n  return like;\r\n};\r\n\r\nexport type GetLikeCountArgs = {\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n *\r\n * Gets the like count of the tweet with the `tweetId`\r\n *\r\n * @param tweetId - `tweet_id` of the tweet for which like count is to be returned\r\n * @returns if the operation is successfull return the count or else returns null\r\n */\r\n\r\nexport const getLikeCount = async ({ tweetId }: GetLikeCountArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserLikedTweet>(\"user_liked_tweet\")\r\n    .select(\"created_at\", { count: \"exact\" })\r\n    .eq(\"tweet_id\", tweetId);\r\n\r\n  if (query.error) {\r\n    // Something went wrong with the request\r\n    return null;\r\n  }\r\n\r\n  return query.count ?? 0;\r\n};\r\n\r\nexport type HasUserLikedTweetArgs = {\r\n  userId: string;\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n * Finds out whether a user has liked a tweet or not\r\n *\r\n * @param userId - `user_id` of the user\r\n * @param tweetId - `tweet_id` of the user\r\n * @return if the operation is successfull return boolean noting whether user has\r\n * liked that tweet or not else returns null\r\n *\r\n */\r\n\r\nexport const hasUserLikedTweet = async ({\r\n  tweetId,\r\n  userId,\r\n}: HasUserLikedTweetArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserLikedTweet>(\"user_liked_tweet\")\r\n    .select(\"created_at\")\r\n    .eq(\"tweet_id\", tweetId)\r\n    .eq(\"user_id\", userId);\r\n\r\n  if (query.error) {\r\n    // Something went wrong with the request\r\n    return null;\r\n  }\r\n\r\n  // If the user have liked the tweet, then the length would have been\r\n  // 1 but if the user have not liked the tweet, then the length would be\r\n  // 0\r\n  return query.data.length === 1;\r\n};\r\n\r\nexport type GetTweetsUserHasLikedArgs = {\r\n  userId: string;\r\n  selectQuery: string;\r\n};\r\n\r\n/**\r\n * Gets all the tweet the user has liked\r\n *\r\n * @param userId - `user_id` of the user\r\n * @param selectQuery - select query to be used while sending request\r\n * @returns\r\n */\r\n\r\nexport const getTweetsUserHasLiked = async <T>({\r\n  userId,\r\n  selectQuery,\r\n}: GetTweetsUserHasLikedArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserLikedTweet>(\"user_liked_tweet\")\r\n    .select(selectQuery)\r\n    .eq(\"user_id\", userId)\r\n    .order(\"created_at\", { ascending: false });\r\n\r\n  if (query.error) {\r\n    // Something is wrong with the query\r\n    return null;\r\n  }\r\n\r\n  return query.data as unknown as T[];\r\n};\r\n\r\nexport type UserBookmarkedTweetArgs = {\r\n  userId: string;\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n *\r\n * Adds to the db that the user with the `userId` has bookmarked the\r\n * tweet with the `tweetId`\r\n *\r\n * @param userId - `user_id` of the user who have bookmarked the tweet\r\n * @param tweetId - `tweet_id` of the tweet which got bookmarked\r\n * @returns if the operation is successfull returns `DbUserBookmarkedTweet` object else returns\r\n * `null`\r\n */\r\nexport const userBookmarkedTweet = async ({\r\n  userId,\r\n  tweetId,\r\n}: UserBookmarkedTweetArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserBookmarkedTweet>(\"user_bookmarked_tweet\")\r\n    .insert({ user_id: userId, tweet_id: tweetId });\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is some error while setting the bookmark\r\n    return null;\r\n  }\r\n\r\n  const bookmark = query.data[0]; // Only one bookmark is added\r\n\r\n  return bookmark;\r\n};\r\n\r\n/**\r\n *\r\n * Removes the bookarmark user has set to the tweet\r\n *\r\n * @param userId - `user_id` of the user who have removing the bookmark\r\n * @param tweetId - `tweet_id` of the tweet\r\n * @returns if the operation is successfull returns `DbUserBookmarkedTweet` object else returns\r\n * `null`\r\n */\r\nexport const userRemovedBookmarkedTweet = async ({\r\n  userId,\r\n  tweetId,\r\n}: UserBookmarkedTweetArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserBookmarkedTweet>(\"user_bookmarked_tweet\")\r\n    .delete()\r\n    .eq(\"user_id\", userId)\r\n    .eq(\"tweet_id\", tweetId);\r\n\r\n  if (query.error || query.data.length === 0) {\r\n    // There is some error while removing the bookmark\r\n    return null;\r\n  }\r\n\r\n  const bookmark = query.data[0]; // Only one bookmarking removed\r\n\r\n  return bookmark;\r\n};\r\n\r\nexport type GetBookmarkCountArgs = {\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n *\r\n * Gets the bookmark count of the tweet with the `tweetId`\r\n *\r\n * @param tweetId - `tweet_id` of the tweet for which like count is to be returned\r\n * @returns if the operation is successfull return the count or else returns null\r\n */\r\n\r\nexport const getBookmarkCount = async ({ tweetId }: GetLikeCountArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserBookmarkedTweet>(\"user_bookmarked_tweet\")\r\n    .select(\"created_at\", { count: \"exact\" })\r\n    .eq(\"tweet_id\", tweetId);\r\n\r\n  if (query.error) {\r\n    // Something went wrong with the request\r\n    return null;\r\n  }\r\n\r\n  return query.count ?? 0;\r\n};\r\n\r\nexport type HasUserBookmarkedTweetArgs = {\r\n  userId: string;\r\n  tweetId: string;\r\n};\r\n\r\n/**\r\n * Finds out whether a user has liked a tweet or not\r\n *\r\n * @param userId - `user_id` of the user\r\n * @param tweetId - `tweet_id` of the user\r\n * @return if the operation is successfull return boolean noting whether user has\r\n * bookmarked that tweet or not else returns null\r\n *\r\n */\r\n\r\nexport const hasUserBookmarkedTweet = async ({\r\n  tweetId,\r\n  userId,\r\n}: HasUserBookmarkedTweetArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserBookmarkedTweet>(\"user_bookmarked_tweet\")\r\n    .select(\"created_at\")\r\n    .eq(\"tweet_id\", tweetId)\r\n    .eq(\"user_id\", userId);\r\n\r\n  if (query.error) {\r\n    // Something went wrong with the request\r\n    return null;\r\n  }\r\n\r\n  // If the user have bookmarked the tweet, then the length would have been\r\n  // 1 but if the user have not bookmarked the tweet, then the length would be\r\n  // 0\r\n  return query.data.length === 1;\r\n};\r\n\r\nexport type GetTweetsUserHasBookmarkedArgs = {\r\n  userId: string;\r\n  selectQuery: string;\r\n};\r\n\r\n/**\r\n * Gets all the tweet the user has bookmarked\r\n *\r\n * @param userId - `user_id` of the user\r\n * @param selectQuery - select query to be used while sending request\r\n * @returns\r\n */\r\n\r\nexport const getTweetsUserHasBookmarked = async <T>({\r\n  userId,\r\n  selectQuery,\r\n}: GetTweetsUserHasLikedArgs) => {\r\n  const query = await supabase\r\n    .from<DbUserLikedTweet>(\"user_bookmarked_tweet\")\r\n    .select(selectQuery)\r\n    .eq(\"user_id\", userId)\r\n    .order(\"created_at\", { ascending: false });\r\n\r\n  if (query.error) {\r\n    // Something is wrong with the query\r\n    return null;\r\n  }\r\n\r\n  return query.data as unknown as T[];\r\n};\r\n\r\nexport type UploadProfilePictureArgs = {\r\n  userId: string;\r\n  file: Readable;\r\n  extension: string;\r\n  contentType: string;\r\n};\r\n\r\nexport const uploadProfilePicture = async ({\r\n  userId,\r\n  extension,\r\n  file,\r\n  contentType,\r\n}: UploadProfilePictureArgs) => {\r\n  const path = `${userId}/profile_picture${extension}`;\r\n\r\n  const uploadRes = await supabase.storage\r\n    .from(\"pictures\")\r\n    .upload(path, file, { contentType });\r\n\r\n  if (uploadRes.error) {\r\n    // Try to update  it\r\n    const updateRes = await supabase.storage\r\n      .from(\"pictures\")\r\n      .update(path, file, { contentType });\r\n\r\n    if (updateRes.error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  const publicUrlRes = await supabase.storage\r\n    .from(\"pictures\")\r\n    .getPublicUrl(path);\r\n\r\n  const publicUrl = publicUrlRes.publicURL;\r\n\r\n  if (publicUrl === null) {\r\n    return null;\r\n  }\r\n\r\n  const updateUser = await supabase\r\n    .from<DbUser>(\"users\")\r\n    .update({ profile_picture_url: publicUrl })\r\n    .eq(\"user_id\", userId);\r\n\r\n  if (updateUser.error || updateUser.data.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return publicUrl;\r\n};\r\n\r\nexport const uploadBackgroundPicture = async ({\r\n  userId,\r\n  extension,\r\n  file,\r\n  contentType,\r\n}: UploadProfilePictureArgs) => {\r\n  const path = `${userId}/background_picture${extension}`;\r\n\r\n  const uploadRes = await supabase.storage\r\n    .from(\"pictures\")\r\n    .upload(path, file, { contentType });\r\n\r\n  if (uploadRes.error) {\r\n    // Try to update  it\r\n    const updateRes = await supabase.storage\r\n      .from(\"pictures\")\r\n      .update(path, file, { contentType });\r\n\r\n    if (updateRes === null) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  const publicUrlRes = await supabase.storage\r\n    .from(\"pictures\")\r\n    .getPublicUrl(path);\r\n\r\n  const publicUrl = publicUrlRes.publicURL;\r\n\r\n  if (publicUrl === null) {\r\n    return null;\r\n  }\r\n\r\n  const updateUser = await supabase\r\n    .from<DbUser>(\"users\")\r\n    .update({ background_picture_url: publicUrl })\r\n    .eq(\"user_id\", userId);\r\n\r\n  if (updateUser.error || updateUser.data.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return publicUrl;\r\n};\r\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\nimport { useActionData, useLoaderData, useTransition } from \"@remix-run/react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { MainTweet } from \"~/components/mainTweet\";\r\nimport { Tweet } from \"~/components/tweet\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport type { DbTweets, DbUser } from \"~/server/supabase.server\";\r\nimport {\r\n  getBookmarkCount,\r\n  hasUserBookmarkedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport { getLikeCount, hasUserLikedTweet } from \"~/server/supabase.server\";\r\nimport { insertTweetReplyFromUser } from \"~/server/supabase.server\";\r\nimport { getTweetUserName } from \"~/server/supabase.server\";\r\nimport { getTweet } from \"~/server/supabase.server\";\r\nimport { getOneTweetFromUser } from \"~/server/supabase.server\";\r\nimport { getUserOfUserName } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\ntype LoaderTweet = {\r\n  userName: string; // Username of the user who posted the tweet\r\n  tweet_id: string;\r\n  message: string;\r\n  replied_to: string | null; // Username of the replied_to user\r\n  replies: TweetReply[];\r\n  likesCount: number;\r\n  likeActive: boolean;\r\n  bookmarkCount: number;\r\n  bookmarkActive: boolean;\r\n  profilePictureUrl: string;\r\n};\r\n\r\ntype TweetReply =\r\n  | {\r\n      type: \"success\";\r\n      tweet: {\r\n        tweet_id: string;\r\n        message: string;\r\n        replied_to: string | null;\r\n        replyCount: number;\r\n        userName: string;\r\n        likesCount: number;\r\n        likeActive: boolean;\r\n        bookmarkCount: number;\r\n        bookmarkActive: boolean;\r\n        profilePictureUrl: string;\r\n      };\r\n    }\r\n  | { type: \"error\"; error: \"User not found\" | \"Tweet not found\" };\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"success\";\r\n      tweet: LoaderTweet;\r\n    }\r\n  | {\r\n      type: \"error\";\r\n      error: \"User not found\" | \"Tweet not found\";\r\n    };\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl);\r\n  }\r\n\r\n  const userName = params.user;\r\n  const tweetId = params.tweetId;\r\n\r\n  invariant(userName, \"Expected to have dynamic route named $user\");\r\n  invariant(tweetId, \"Expected to have dynamic route named $tweetId\");\r\n\r\n  const user = await getUserOfUserName<Pick<DbUser, \"user_name\" | \"user_id\">>(\r\n    userName,\r\n    \"user_name, user_id\"\r\n  );\r\n\r\n  if (user === null) {\r\n    return json<LoaderData>({ error: \"User not found\", type: \"error\" });\r\n  }\r\n\r\n  const { user_id: userId } = user;\r\n\r\n  type TweetQueryResult = {\r\n    message: string;\r\n    tweet_id: string;\r\n    replied_to: string | null;\r\n    replies: string[];\r\n    users: {\r\n      profile_picture_url: string | null;\r\n    };\r\n  };\r\n\r\n  const tweet = await getOneTweetFromUser<TweetQueryResult>({\r\n    userId: userId,\r\n    tweetId,\r\n    selectQuery:\r\n      \"message, tweet_id, replied_to, replies, users!fk_user_id(profile_picture_url)\",\r\n  });\r\n\r\n  if (tweet === null) {\r\n    return json<LoaderData>({ error: \"Tweet not found\", type: \"error\" });\r\n  }\r\n\r\n  if (tweet.replied_to !== null) {\r\n    // As of now tweet.replied_to is in uuid, we have to convert it to\r\n    // userName\r\n    const userNameRes = await getTweetUserName(tweet.replied_to);\r\n\r\n    invariant(userNameRes, \"Expected replied_to user_id to be valid\");\r\n\r\n    // Set found userName in tweet.replied_to field\r\n    tweet.replied_to = userNameRes;\r\n  }\r\n\r\n  const repliesResult = await Promise.all(\r\n    tweet.replies.map((replyTweetId) => {\r\n      type ReplyTweetQueryResult = {\r\n        message: string;\r\n        tweet_id: string;\r\n        replied_to: string | null;\r\n        replies: string[];\r\n        users: {\r\n          profile_picture_url: string | null;\r\n        };\r\n      };\r\n\r\n      const replyTweet = getTweet<ReplyTweetQueryResult>({\r\n        tweetId: replyTweetId,\r\n        selectQuery:\r\n          \"message, tweet_id, replied_to, replies, users!fk_user_id(profile_picture_url)\",\r\n      });\r\n\r\n      return replyTweet;\r\n    })\r\n  );\r\n\r\n  const tweetWithUserName = {\r\n    ...tweet,\r\n    userName: userName,\r\n    likesCount: (await getLikeCount({ tweetId: tweet.tweet_id })) ?? 0,\r\n    likeActive:\r\n      (await hasUserLikedTweet({ tweetId: tweetId, userId: loggedInUserId })) ??\r\n      false,\r\n    bookmarkCount: (await getBookmarkCount({ tweetId: tweet.tweet_id })) ?? 0,\r\n    bookmarkActive:\r\n      (await hasUserBookmarkedTweet({\r\n        tweetId,\r\n        userId: loggedInUserId,\r\n      })) ?? false,\r\n    profilePictureUrl: tweet.users.profile_picture_url ?? \"\",\r\n  };\r\n\r\n  const replies: TweetReply[] = await Promise.all(\r\n    repliesResult.map(async (repliesResult): Promise<TweetReply> => {\r\n      if (repliesResult === null) {\r\n        return { type: \"error\", error: \"Tweet not found\" };\r\n      }\r\n\r\n      const tweetUserName = await getTweetUserName(repliesResult.tweet_id);\r\n      const likesCount =\r\n        (await getLikeCount({\r\n          tweetId: repliesResult.tweet_id,\r\n        })) ?? 0;\r\n\r\n      const likeActive =\r\n        (await hasUserLikedTweet({\r\n          tweetId: repliesResult.tweet_id,\r\n          userId: loggedInUserId,\r\n        })) ?? false;\r\n\r\n      const bookmarkCount =\r\n        (await getBookmarkCount({\r\n          tweetId: repliesResult.tweet_id,\r\n        })) ?? 0;\r\n\r\n      const bookmarkActive =\r\n        (await hasUserBookmarkedTweet({\r\n          tweetId: repliesResult.tweet_id,\r\n          userId: loggedInUserId,\r\n        })) ?? false;\r\n\r\n      if (tweetUserName === null) {\r\n        return { type: \"error\", error: \"User not found\" };\r\n      }\r\n\r\n      return {\r\n        type: \"success\",\r\n        tweet: {\r\n          message: repliesResult.message,\r\n          tweet_id: repliesResult.tweet_id,\r\n          userName: tweetUserName,\r\n          // Since we are finding the replies for the tweet from the user, we can set userName\r\n          // to that userName without needing to fetch it from db\r\n          replied_to: userName,\r\n          replyCount: repliesResult.replies.length,\r\n          likesCount: likesCount,\r\n          likeActive: likeActive,\r\n          bookmarkActive,\r\n          bookmarkCount,\r\n          profilePictureUrl: repliesResult.users.profile_picture_url ?? \"\",\r\n        },\r\n      };\r\n    })\r\n  );\r\n\r\n  return json<LoaderData>({\r\n    type: \"success\",\r\n    tweet: { ...tweetWithUserName, replies: replies },\r\n  });\r\n};\r\n\r\ntype ActionData = {\r\n  errorMessage?: string;\r\n};\r\n\r\nexport const action: ActionFunction = async ({ request, params }) => {\r\n  const formdata = await request.formData();\r\n  const userId = await getUserId(request);\r\n\r\n  if (userId === null) {\r\n    // User is not loggedIn\r\n\r\n    return redirect(AppUrl.join);\r\n  }\r\n\r\n  const actionType = formdata.get(\"actionType\");\r\n\r\n  if (actionType === \"tweetReply\") {\r\n    const replyMessage = formdata.get(\"reply\");\r\n\r\n    if (!replyMessage || typeof replyMessage !== \"string\") {\r\n      return json<ActionData>({ errorMessage: \"Please enter valid reply\" });\r\n    }\r\n\r\n    const tweetId = params.tweetId;\r\n    const userName = params.user;\r\n\r\n    invariant(tweetId, \"Expected to have dynamic route named $tweetId\");\r\n    invariant(userName, \"Expected to have dynamic route named $user\");\r\n\r\n    const result = await insertTweetReplyFromUser({\r\n      message: replyMessage,\r\n      repliedTo: tweetId,\r\n      userId: userId,\r\n    });\r\n\r\n    if (result === null) {\r\n      // Something is wrong when adding it to db\r\n      return json<ActionData>({\r\n        errorMessage: \"Error adding reply, try again later\",\r\n      });\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default function TweetPage() {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n  const actionData = useActionData<ActionData>();\r\n  const transition = useTransition();\r\n  const formRef = useRef<HTMLFormElement | null>(null);\r\n\r\n  const isReplying =\r\n    transition.state === \"submitting\" &&\r\n    transition.submission.formData.get(\"actionType\") === \"tweetReply\";\r\n\r\n  useEffect(() => {\r\n    if (!isReplying) {\r\n      formRef.current?.reset();\r\n    }\r\n  }, [isReplying]);\r\n\r\n  if (loaderData.type === \"error\") return <p>{loaderData.error}</p>;\r\n\r\n  const {\r\n    tweet: {\r\n      message,\r\n      replied_to,\r\n      replies,\r\n      userName,\r\n      likesCount,\r\n      likeActive,\r\n      tweet_id,\r\n      bookmarkActive,\r\n      bookmarkCount,\r\n      profilePictureUrl,\r\n    },\r\n  } = loaderData;\r\n  return (\r\n    <div className=\"max-w-[600px] border-r border-r-gray-600 min-h-screen\">\r\n      <div className=\"sticky top-0 p-4 bg-black font-bold text-xl shadow bg-opacity-80\">\r\n        Thread\r\n      </div>\r\n      <div>\r\n        <MainTweet\r\n          message={message}\r\n          replied_to={replied_to}\r\n          repliesCount={replies.length}\r\n          userName={userName}\r\n          errorMessage={actionData?.errorMessage}\r\n          likesCount={likesCount}\r\n          likeActive={likeActive}\r\n          tweetId={tweet_id}\r\n          bookmarkActive={bookmarkActive}\r\n          bookmarkCount={bookmarkCount}\r\n          profilePictureUrl={profilePictureUrl}\r\n        />\r\n        {replies.map((reply) => {\r\n          if (reply.type === \"error\") return <div>{reply.error}</div>;\r\n\r\n          const {\r\n            message,\r\n            replied_to,\r\n            replyCount,\r\n            tweet_id,\r\n            userName,\r\n            likeActive,\r\n            likesCount,\r\n            bookmarkActive,\r\n            bookmarkCount,\r\n            profilePictureUrl,\r\n          } = reply.tweet;\r\n\r\n          return (\r\n            <div key={tweet_id} className=\"border-b border-gray-600\">\r\n              <Tweet\r\n                likesCount={likesCount}\r\n                likeActive={likeActive}\r\n                message={message}\r\n                relpiesCount={replyCount}\r\n                tweetId={tweet_id}\r\n                repliedTo={replied_to ?? undefined}\r\n                userName={userName}\r\n                bookmarkActive={bookmarkActive}\r\n                bookmarkCount={bookmarkCount}\r\n                profilePictureUrl={profilePictureUrl}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "import { Form, Link, useTransition } from \"@remix-run/react\";\r\nimport { blob } from \"node:stream/consumers\";\r\nimport React, { useRef } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { AiOutlineHeart } from \"react-icons/ai\";\r\nimport { BsBookmarkPlus } from \"react-icons/bs\";\r\nimport { FaRegComment } from \"react-icons/fa\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { FormButton } from \"./formButton\";\r\nimport { TexterTextArea } from \"./texterTextArea\";\r\n\r\nexport type MainTweetProps = {\r\n  userName: string;\r\n  message: string;\r\n  replied_to: string | null;\r\n  repliesCount: number;\r\n  likesCount: number;\r\n  errorMessage?: string;\r\n  likeActive: boolean;\r\n  tweetId: string;\r\n  bookmarkCount: number;\r\n  bookmarkActive: boolean;\r\n  profilePictureUrl: string;\r\n};\r\n\r\nexport const MainTweet = ({\r\n  message,\r\n  replied_to,\r\n  repliesCount,\r\n  userName,\r\n  likesCount,\r\n  errorMessage,\r\n  likeActive,\r\n  tweetId,\r\n  bookmarkActive,\r\n  bookmarkCount,\r\n  profilePictureUrl,\r\n}: MainTweetProps) => {\r\n  const transition = useTransition();\r\n\r\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\r\n  const formRef = useRef<HTMLFormElement | null>(null);\r\n\r\n  const isSubmitting = transition.state === \"submitting\";\r\n\r\n  const userUrl = `${AppUrl.home}${userName}`;\r\n  const tweetUrl = `${AppUrl.home}${userName}/tweets/${tweetId}`;\r\n\r\n  const onReplyClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    if (textAreaRef.current) {\r\n      textAreaRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n      textAreaRef.current.focus();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isSubmitting) {\r\n      formRef.current?.reset();\r\n    }\r\n  }, [isSubmitting]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"p-4\">\r\n        <div className=\"border-b border-gray-600 pb-8 flex flex-col gap-y-4\">\r\n          <div className=\"flex gap-x-2 items-center\">\r\n            <Link to={userUrl}>\r\n              <div\r\n                className=\"w-[50px] h-[50px] rounded-full bg-texter-blue bg-no-repeat bg-cover\"\r\n                style={{ backgroundImage: `url(${profilePictureUrl})` }}\r\n              >\r\n                {/* Profile Picture */}\r\n              </div>\r\n            </Link>\r\n            <div className=\"flex flex-col gap-y-1\">\r\n              <Link to={userUrl} className=\"text hover:underline\">\r\n                {userName}\r\n              </Link>\r\n              {replied_to ? (\r\n                <MainTweetReplyingTo repliedTo={replied_to} />\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <p className=\"whitespace-pre-line text-xl\">{message}</p>\r\n        </div>\r\n        <div className=\"flex gap-x-4 p-4 border-gray-600 border-b \">\r\n          <MainTweetInfo value={repliesCount} name=\"Replies\" />\r\n          <MainTweetInfo value={likesCount} name=\"Likes\" />\r\n          <MainTweetInfo value={bookmarkCount} name=\"Bookmark\" />\r\n        </div>\r\n        <div className=\"border-b border-gray-600 py-2\">\r\n          <MainTweetOptions\r\n            onReplyClick={onReplyClick}\r\n            likeActive={likeActive}\r\n            tweetUrl={tweetUrl}\r\n            bookmarkActive={bookmarkActive}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Form method=\"post\" className=\"border-b border-gray-600\" ref={formRef}>\r\n        <TweetYourReply\r\n          ref={textAreaRef}\r\n          errorMessage={errorMessage}\r\n          userUrl={userUrl}\r\n          profilePictureUrl={profilePictureUrl}\r\n        />\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype MainTweetReplyingToProps = {\r\n  repliedTo: string;\r\n};\r\n\r\nconst MainTweetReplyingTo = ({ repliedTo }: MainTweetReplyingToProps) => {\r\n  const repliedToUserUrl = `${AppUrl.home}${repliedTo}`;\r\n\r\n  return (\r\n    <span className=\"text-sm text-texter-gray\">\r\n      Replying to{\" \"}\r\n      <Link\r\n        to={repliedToUserUrl}\r\n        className=\"text-texter-blue hover:underline\"\r\n      >{`@${repliedTo}`}</Link>\r\n    </span>\r\n  );\r\n};\r\n\r\ntype MainTweetInfoProps = {\r\n  name: string;\r\n  value: number;\r\n};\r\n\r\nconst MainTweetInfo = ({ name, value }: MainTweetInfoProps) => {\r\n  return (\r\n    <span className=\"hover:underline\">\r\n      <span className=\"font-bold\">{value} </span>\r\n      <span className=\"text-gray-500\">{name}</span>\r\n    </span>\r\n  );\r\n};\r\n\r\ntype MainTweetOptionsProps = {\r\n  onReplyClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  likeActive: boolean;\r\n  tweetUrl: string;\r\n  bookmarkActive: boolean;\r\n};\r\n\r\nconst MainTweetOptions = ({\r\n  onReplyClick,\r\n  likeActive,\r\n  tweetUrl,\r\n  bookmarkActive,\r\n}: MainTweetOptionsProps) => {\r\n  const likeUrl = `${tweetUrl}/like`;\r\n  const bookmarkUrl = `${tweetUrl}/bookmark`;\r\n\r\n  return (\r\n    <ul className=\"flex justify-around\">\r\n      <li>\r\n        <button\r\n          className=\"group p-3 rounded-full hover:bg-comment-blue hover:bg-opacity-20\"\r\n          onClick={onReplyClick}\r\n          type=\"button\"\r\n        >\r\n          <FaRegComment\r\n            size=\"20px\"\r\n            className=\"fill-gray-500 group-hover:fill-comment-blue\"\r\n          />\r\n        </button>\r\n      </li>\r\n      <li>\r\n        <FormButton\r\n          action={likeUrl}\r\n          method=\"post\"\r\n          navigate={false}\r\n          name=\"actionType\"\r\n          value={likeActive ? \"unlike\" : \"like\"}\r\n          className=\"group p-3 rounded-full hover:bg-like-red hover:bg-opacity-20\"\r\n        >\r\n          <AiOutlineHeart\r\n            size=\"20px\"\r\n            className={`group-hover:fill-like-red ${\r\n              likeActive ? \"fill-like-red\" : \"fill-gray-500\"\r\n            }`}\r\n          />\r\n        </FormButton>\r\n      </li>\r\n      <li>\r\n        <FormButton\r\n          action={bookmarkUrl}\r\n          method=\"post\"\r\n          navigate={false}\r\n          name=\"actionType\"\r\n          value={bookmarkActive ? \"removeBookmark\" : \"bookmark\"}\r\n          className=\"group p-3 rounded-full hover:bg-like-red hover:bg-opacity-20\"\r\n        >\r\n          <BsBookmarkPlus\r\n            size=\"20px\"\r\n            className={`group-hover:fill-like-red ${\r\n              bookmarkActive ? \"fill-like-red\" : \"fill-gray-500\"\r\n            }`}\r\n          />\r\n        </FormButton>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\ntype TweetYourReplyProps = {\r\n  errorMessage?: string;\r\n  userUrl: string;\r\n  profilePictureUrl: string;\r\n};\r\n\r\nconst TweetYourReply = React.forwardRef<\r\n  HTMLTextAreaElement,\r\n  TweetYourReplyProps\r\n>(({ errorMessage, userUrl, profilePictureUrl }, ref) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-y-2\">\r\n      <TexterTextArea\r\n        name=\"reply\"\r\n        placeholder=\"Tweet your reply\"\r\n        ref={ref}\r\n        errorMessage={errorMessage}\r\n        label=\"Your Reply\"\r\n        userUrl={userUrl}\r\n        profilePictureUrl={profilePictureUrl}\r\n      />\r\n      <div className=\"flex justify-end p-4\">\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-texter-blue px-4 py-2 rounded-full\"\r\n          name=\"actionType\"\r\n          value=\"tweetReply\"\r\n        >\r\n          Tweet\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nTweetYourReply.displayName = \"TweetYourReply\";\r\n", "import { Link } from \"@remix-run/react\";\r\nimport React from \"react\";\r\n\r\nexport type TexterTextAreaProps = {\r\n  placeholder: string;\r\n  name: string;\r\n  label: string;\r\n  errorMessage?: string;\r\n  autoFocus?: boolean;\r\n  userUrl: string;\r\n  profilePictureUrl: string;\r\n};\r\n\r\nexport const TexterTextArea = React.forwardRef<\r\n  HTMLTextAreaElement,\r\n  TexterTextAreaProps\r\n>(\r\n  (\r\n    {\r\n      placeholder,\r\n      name,\r\n      label,\r\n      errorMessage,\r\n      autoFocus,\r\n      userUrl,\r\n      profilePictureUrl,\r\n    },\r\n    ref\r\n  ) => {\r\n    return (\r\n      <div className=\"flex flex-col px-3\">\r\n        <label htmlFor={name} hidden>\r\n          {label}\r\n        </label>\r\n        <div className=\"flex gap-x-2\">\r\n          <Link to={userUrl}>\r\n            <div\r\n              className=\"w-[50px] h-[50px] rounded-full bg-texter-blue bg-no-repeat bg-cover\"\r\n              style={{ backgroundImage: `url(${profilePictureUrl})` }}\r\n            >\r\n              {/* Profile Picture */}\r\n            </div>\r\n          </Link>\r\n          <textarea\r\n            name={name}\r\n            id={name}\r\n            placeholder={placeholder}\r\n            className=\"bg-inherit w-full py-4 focus:outline-none text-xl mb-2\"\r\n            autoFocus={autoFocus}\r\n            ref={ref}\r\n          />\r\n        </div>\r\n        {typeof errorMessage === \"string\" ? (\r\n          <p className=\"text-red-error text-sm\">{errorMessage}</p>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nTexterTextArea.displayName = \"TexterTextArea\";\r\n", "import { Link } from \"@remix-run/react\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { FaRegComment } from \"react-icons/fa\";\r\nimport { AiOutlineHeart } from \"react-icons/ai\";\r\nimport { FormButton } from \"./formButton\";\r\nimport { BsBookmarkPlus } from \"react-icons/bs\";\r\n\r\nexport type TweetProps = {\r\n  userName: string;\r\n  message: string;\r\n  tweetId: string;\r\n  repliedTo?: string;\r\n  relpiesCount: number;\r\n  likesCount: number;\r\n  likeActive: boolean;\r\n  bookmarkCount: number;\r\n  bookmarkActive: boolean;\r\n  profilePictureUrl: string;\r\n};\r\n\r\nexport const Tweet = ({\r\n  userName,\r\n  message,\r\n  tweetId,\r\n  repliedTo,\r\n  likesCount,\r\n  relpiesCount,\r\n  likeActive,\r\n  bookmarkCount,\r\n  bookmarkActive,\r\n  profilePictureUrl,\r\n}: TweetProps) => {\r\n  const userUrl = `${AppUrl.home}${userName}`;\r\n  const tweetUrl = `${AppUrl.home}${userName}/tweets/${tweetId}`;\r\n\r\n  return (\r\n    <div className=\"flex p-3 gap-x-2\">\r\n      <Link to={userUrl}>\r\n        <div\r\n          className=\"w-[50px] h-[50px] rounded-full bg-texter-blue bg-no-repeat bg-cover\"\r\n          style={{ backgroundImage: `url(${profilePictureUrl})` }}\r\n        >\r\n          {/* Profile Picture */}\r\n        </div>\r\n      </Link>\r\n\r\n      <div className=\"flex flex-col gap-y-3\">\r\n        <div className=\"flex gap-x-4\">\r\n          <div className=\"flex flex-col\">\r\n            <Link to={userUrl} className=\"font-bold hover:underline\">\r\n              {userName}\r\n            </Link>\r\n            {repliedTo ? <TweetReplyingTo repliedTo={repliedTo} /> : null}\r\n          </div>\r\n        </div>\r\n        <Link to={tweetUrl}>\r\n          <p className=\"whitespace-pre-line text-sm\">{message}</p>\r\n        </Link>\r\n        <TweetOptions\r\n          likesCount={likesCount}\r\n          repliesCount={relpiesCount}\r\n          likeActive={likeActive}\r\n          tweetUrl={tweetUrl}\r\n          bookmarkActive={bookmarkActive}\r\n          bookmarkCount={bookmarkCount}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TweetReplyingTo = ({ repliedTo }: { repliedTo: string }) => {\r\n  const repliedToUserUrl = `${AppUrl.home}${repliedTo}`;\r\n\r\n  return (\r\n    <span className=\"text-xs text-texter-gray\">\r\n      Replying to{\" \"}\r\n      <Link\r\n        to={repliedToUserUrl}\r\n        className=\"text-texter-blue hover:underline\"\r\n      >{`@${repliedTo}`}</Link>\r\n    </span>\r\n  );\r\n};\r\n\r\ntype TweetOptionsProps = {\r\n  repliesCount: number;\r\n  likesCount: number;\r\n  tweetUrl: string;\r\n  likeActive: boolean;\r\n  bookmarkCount: number;\r\n  bookmarkActive: boolean;\r\n};\r\n\r\nconst TweetOptions = ({\r\n  repliesCount,\r\n  likesCount,\r\n  tweetUrl,\r\n  likeActive,\r\n  bookmarkActive,\r\n  bookmarkCount,\r\n}: TweetOptionsProps) => {\r\n  const likeUrl = `${tweetUrl}/like`;\r\n  const bookmarkUrl = `${tweetUrl}/bookmark`;\r\n\r\n  return (\r\n    <ol className=\"flex gap-x-8 -ml-2\">\r\n      <li className=\" flex items-center gap-x-4 group\">\r\n        {/* Reply */}\r\n        <Link to={tweetUrl}>\r\n          <div className=\"group-hover:bg-comment-blue group-hover:bg-opacity-20 p-2 rounded-full\">\r\n            <FaRegComment\r\n              size=\"15px\"\r\n              className=\"group-hover:fill-comment-blue fill-gray-400\"\r\n            />\r\n          </div>\r\n        </Link>\r\n        <span className=\"text-xs group-hover:text-comment-blue text-gray-400 min-w-[4px]\">\r\n          {repliesCount || null}\r\n        </span>\r\n      </li>\r\n      <li className=\" flex items-center gap-x-4 group\">\r\n        {/* Like */}\r\n        <FormButton\r\n          action={likeUrl}\r\n          navigate={false}\r\n          method=\"post\"\r\n          name=\"actionType\"\r\n          value={likeActive ? \"unlike\" : \"like\"}\r\n          className=\"group-hover:bg-like-red group-hover:bg-opacity-20 p-2 rounded-full\"\r\n        >\r\n          <AiOutlineHeart\r\n            size=\"15px\"\r\n            className={`group-hover:fill-like-red ${\r\n              likeActive ? \"fill-like-red\" : \"fill-gray-400\"\r\n            }`}\r\n          />\r\n        </FormButton>\r\n        <span\r\n          className={`text-xs group-hover:text-like-red ${\r\n            likeActive ? \"text-like-red\" : \"text-gray-400\"\r\n          }`}\r\n        >\r\n          {likesCount || null}\r\n        </span>\r\n      </li>\r\n      <li className=\" flex items-center gap-x-4 group\">\r\n        {/* Like */}\r\n        <FormButton\r\n          action={bookmarkUrl}\r\n          navigate={false}\r\n          method=\"post\"\r\n          name=\"actionType\"\r\n          value={bookmarkActive ? \"removeBookmark\" : \"bookmark\"}\r\n          className=\"group-hover:bg-like-red group-hover:bg-opacity-20 p-2 rounded-full\"\r\n        >\r\n          <BsBookmarkPlus\r\n            size=\"15px\"\r\n            className={`group-hover:fill-like-red ${\r\n              bookmarkActive ? \"fill-like-red\" : \"fill-gray-400\"\r\n            }`}\r\n          />\r\n        </FormButton>\r\n        <span\r\n          className={`text-xs group-hover:text-like-red ${\r\n            bookmarkActive ? \"text-like-red\" : \"text-gray-400\"\r\n          }`}\r\n        >\r\n          {bookmarkCount || null}\r\n        </span>\r\n      </li>\r\n    </ol>\r\n  );\r\n};\r\n", "import type {\r\n  ActionFunction,\r\n  LoaderFunction,\r\n  UploadHandler,\r\n} from \"@remix-run/node\";\r\nimport { redirect, unstable_parseMultipartFormData } from \"@remix-run/node\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { Form, useLoaderData } from \"@remix-run/react\";\r\nimport { TexterInput } from \"~/components/texterInput\";\r\nimport {\r\n  getUserId,\r\n  getUserSession,\r\n  sessionStorage,\r\n} from \"~/server/session.server\";\r\nimport { BsCamera } from \"react-icons/bs\";\r\nimport React, { useRef } from \"react\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport {\r\n  supabase,\r\n  uploadBackgroundPicture,\r\n  uploadProfilePicture,\r\n} from \"~/server/supabase.server\";\r\nimport { getUserOfUserId } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport path from \"path\";\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"error\";\r\n      error: \"User not found\";\r\n    }\r\n  | {\r\n      type: \"success\";\r\n      profilePictureUrl: string;\r\n      backgroundPictureUrl: string;\r\n      bio: string;\r\n      userName: string;\r\n    };\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const loggedInUserId = (await getUserId(request))!;\r\n\r\n  const loggedInUser = await getUserOfUserId<\r\n    Pick<\r\n      DbUser,\r\n      \"background_picture_url\" | \"bio\" | \"profile_picture_url\" | \"user_name\"\r\n    >\r\n  >(\r\n    loggedInUserId,\r\n    \"bio, background_picture_url, profile_picture_url, user_name\"\r\n  );\r\n\r\n  if (loggedInUser === null) {\r\n    return json<LoaderData>({ error: \"User not found\", type: \"error\" });\r\n  }\r\n\r\n  return json<LoaderData>({\r\n    type: \"success\",\r\n    backgroundPictureUrl: loggedInUser.background_picture_url ?? \"\",\r\n    profilePictureUrl: loggedInUser.profile_picture_url ?? \"\",\r\n    bio: loggedInUser.bio ?? \"\",\r\n    userName: loggedInUser.user_name,\r\n  });\r\n};\r\n\r\ntype ActionData = {\r\n  backgroundPictureError?: string;\r\n  profilePictureError?: string;\r\n  bioError?: string;\r\n  nameError?: string;\r\n};\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const userId = (await getUserId(request))!;\r\n\r\n  const user = await getUserOfUserId<Pick<DbUser, \"user_name\">>(\r\n    userId,\r\n    \"user_name\"\r\n  );\r\n\r\n  if (user === null) {\r\n    const userSession = await getUserSession(request);\r\n\r\n    return redirect(`${AppUrl.home}${AppUrl.join}`, {\r\n      headers: {\r\n        \"Set-Cookie\": await sessionStorage.destroySession(userSession),\r\n      },\r\n    });\r\n  }\r\n\r\n  const customUploadHandler: UploadHandler = async ({\r\n    encoding,\r\n    filename,\r\n    mimetype,\r\n    name,\r\n    stream,\r\n  }) => {\r\n    const isUploadingProfilePicture = name === \"profilePicture\";\r\n    const isUploadingBackgroundPicture = name == \"backgroundPicture\";\r\n\r\n    if (!isUploadingBackgroundPicture && !isUploadingProfilePicture) {\r\n      return undefined;\r\n    }\r\n\r\n    if (filename === \"\") {\r\n      return undefined;\r\n    }\r\n    const extName = path.parse(filename).ext;\r\n\r\n    const publicUrl = isUploadingProfilePicture\r\n      ? await uploadProfilePicture({\r\n          userId,\r\n          extension: extName,\r\n          file: stream,\r\n          contentType: mimetype,\r\n        })\r\n      : await uploadBackgroundPicture({\r\n          extension: extName,\r\n          file: stream,\r\n          userId,\r\n          contentType: mimetype,\r\n        });\r\n\r\n    if (publicUrl === null) {\r\n      throw json<ActionData>({\r\n        [isUploadingBackgroundPicture\r\n          ? \"backgroundPictureError\"\r\n          : \"profilePictureError\"]: \"Error uploading file\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const formData = await unstable_parseMultipartFormData(\r\n    request,\r\n    customUploadHandler\r\n  );\r\n\r\n  const updatedUserName = formData.get(\"username\");\r\n  const updatedBio = formData.get(\"bio\");\r\n\r\n  if (typeof updatedUserName !== \"string\" || !updatedUserName) {\r\n    return json<ActionData>({ nameError: \"Enter valid username\" });\r\n  }\r\n\r\n  if (typeof updatedBio !== \"string\") {\r\n    return json<ActionData>({ nameError: \"Enter valid bio\" });\r\n  }\r\n\r\n  const updateRes = await supabase\r\n    .from<DbUser>(\"users\")\r\n    .update({ user_name: updatedUserName, bio: updatedBio })\r\n    .eq(\"user_id\", userId);\r\n\r\n  if (updateRes.error) {\r\n    return json<ActionData>({\r\n      nameError: \"Enter another username, this one is already taken\",\r\n    });\r\n  }\r\n\r\n  return redirect(AppUrl.home);\r\n};\r\n\r\nconst createdUrls: {\r\n  profilePicture: string | null;\r\n  backgroundPicture: string | null;\r\n} = {\r\n  profilePicture: null,\r\n  backgroundPicture: null,\r\n};\r\n\r\nexport default function () {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n\r\n  const backgroundPictureInputRef = useRef<HTMLInputElement | null>(null);\r\n  const profilePictureInputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const profilePictureRenderRef = useRef<HTMLDivElement | null>(null);\r\n  const backgroundPictureRenderRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  if (loaderData.type === \"error\") return <div>{loaderData.error}</div>;\r\n\r\n  const onChangeBackgroundPicture = (\r\n    e: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    backgroundPictureInputRef.current?.click();\r\n  };\r\n\r\n  const onChangeProfilePicture = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n\r\n    profilePictureInputRef.current?.click();\r\n  };\r\n\r\n  const onBackgroundPictureInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const file = e.target.files?.[0];\r\n\r\n    if (file === undefined || !backgroundPictureRenderRef.current) return;\r\n\r\n    const newUrl = URL.createObjectURL(file);\r\n\r\n    backgroundPictureRenderRef.current.style.backgroundImage = `url(${newUrl})`;\r\n\r\n    if (createdUrls.backgroundPicture !== null) {\r\n      URL.revokeObjectURL(createdUrls.backgroundPicture);\r\n    }\r\n\r\n    createdUrls.backgroundPicture = newUrl;\r\n  };\r\n\r\n  const onProfilePictureInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const file = e.target.files?.[0];\r\n\r\n    if (file === undefined || !profilePictureRenderRef.current) return;\r\n\r\n    const newUrl = URL.createObjectURL(file);\r\n\r\n    profilePictureRenderRef.current.style.backgroundImage = `url(${newUrl})`;\r\n\r\n    if (createdUrls.profilePicture !== null) {\r\n      URL.revokeObjectURL(createdUrls.profilePicture);\r\n    }\r\n\r\n    createdUrls.profilePicture = newUrl;\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      method=\"post\"\r\n      className=\"max-w-[600px] border-r border-gray-600 min-h-screen\"\r\n      encType=\"multipart/form-data\"\r\n    >\r\n      <div className=\"sticky top-0 p-4 bg-black font-bold text-xl shadow bg-opacity-80\">\r\n        Edit Profile\r\n      </div>\r\n      <input\r\n        type=\"file\"\r\n        name=\"backgroundPicture\"\r\n        hidden\r\n        ref={backgroundPictureInputRef}\r\n        accept=\"image/*\"\r\n        onChange={onBackgroundPictureInputChange}\r\n      />\r\n      <input\r\n        type=\"file\"\r\n        name=\"profilePicture\"\r\n        hidden\r\n        ref={profilePictureInputRef}\r\n        accept=\"image/*\"\r\n        onChange={onProfilePictureInputChange}\r\n      />\r\n      <div\r\n        className=\"h-[200px] bg-texter-gray-dark bg-no-repeat bg-cover\"\r\n        ref={backgroundPictureRenderRef}\r\n        style={{ backgroundImage: `url(${loaderData.backgroundPictureUrl})` }}\r\n      >\r\n        <div className=\"h-full bg-black bg-opacity-40 w-full grid place-items-center\">\r\n          <button\r\n            className=\"p-2 rounded-full hover:bg-white hover:bg-opacity-10\"\r\n            type=\"button\"\r\n            onClick={onChangeBackgroundPicture}\r\n          >\r\n            <BsCamera size=\"30px\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {/* Profile picture */}\r\n        <div\r\n          className=\"w-[150px] h-[150px] bg-texter-blue rounded-full -mt-[75px] ml-4 border-4 border-black bg-no-repeat bg-cover\"\r\n          ref={profilePictureRenderRef}\r\n          style={{ backgroundImage: `url(${loaderData.profilePictureUrl})` }}\r\n        >\r\n          <div className=\"bg-black bg-opacity-40 grid place-items-center h-full rounded-full\">\r\n            <button\r\n              className=\"p-2 rounded-full hover:bg-white hover:bg-opacity-10\"\r\n              type=\"button\"\r\n              onClick={onChangeProfilePicture}\r\n            >\r\n              <BsCamera size=\"30px\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"mx-3 my-8\">\r\n        <div className=\"max-w-[350px] flex flex-col gap-y-3\">\r\n          <TexterInput\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            placeholder=\"username\"\r\n            type=\"text\"\r\n            autoFocus\r\n            defaultValue={loaderData.userName}\r\n          />\r\n          <label className=\"flex flex-col gap-y-6\">\r\n            <span className=\"text-xl font-bold\">Bio</span>\r\n            <textarea\r\n              className=\"bg-inherit w-full py-4 focus:outline-none mb-2 border border-gray-700 focus:border-texter-blue px-2 rounded\"\r\n              placeholder=\"About yourselves\"\r\n              defaultValue={loaderData.bio}\r\n              name=\"bio\"\r\n            />\r\n          </label>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-texter-blue px-4 py-3 rounded-full max-w-[100px] hover:bg-texter-blue-dark\"\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n", "export type TexterInputProps = {\r\n  label: string;\r\n  name: string;\r\n  type: React.HTMLInputTypeAttribute;\r\n  placeholder: string;\r\n  autoFocus?: boolean;\r\n  error?: boolean;\r\n  errorMessage?: string;\r\n  defaultValue?: string;\r\n};\r\n\r\nexport const TexterInput = ({\r\n  label,\r\n  name,\r\n  type,\r\n  placeholder,\r\n  autoFocus,\r\n  error,\r\n  errorMessage,\r\n  defaultValue,\r\n}: TexterInputProps) => {\r\n  return (\r\n    <div className=\"flex flex-col w-full gap-y-6\">\r\n      <label htmlFor={name} className=\"text-xl font-bold\">\r\n        {label}\r\n      </label>\r\n      <div className=\"flex flex-col\">\r\n        <input\r\n          type={type}\r\n          id={name}\r\n          name={name}\r\n          className={`bg-inherit border-2  py-4 px-2 rounded focus:outline-none mb-3 ${\r\n            error\r\n              ? \"border-red-error\"\r\n              : \"border-gray-700 focus:border-texter-blue\"\r\n          }`}\r\n          placeholder={placeholder}\r\n          autoFocus={autoFocus}\r\n          defaultValue={defaultValue}\r\n        />\r\n        {errorMessage ? (\r\n          <p className=\"text-red-error text-sm\">{errorMessage}</p>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n", "import type { LoaderFunction } from \"@remix-run/node\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { useLoaderData } from \"@remix-run/react\";\r\nimport { Tweet } from \"~/components/tweet\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport { getUserOfUserId } from \"~/server/supabase.server\";\r\nimport {\r\n  getBookmarkCount,\r\n  getLikeCount,\r\n  getTweetsUserHasBookmarked,\r\n  getTweetUserName,\r\n  hasUserBookmarkedTweet,\r\n  hasUserLikedTweet,\r\n} from \"~/server/supabase.server\";\r\n\r\ntype LoaderTweets = {\r\n  message: string;\r\n  repliesCount: number;\r\n  tweetId: string;\r\n  userName: string;\r\n  repliedTo?: string;\r\n  likesCount: number;\r\n  likeActive: boolean;\r\n  bookmarkActive: boolean;\r\n  bookmarkCount: number;\r\n  profilePictureUrl: string;\r\n};\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"error\";\r\n      error: \"Tweets not found\";\r\n    }\r\n  | {\r\n      type: \"success\";\r\n      tweets: LoaderTweets[];\r\n    };\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const loggedInUserId = (await getUserId(request))!;\r\n\r\n  const user = await getUserOfUserId<Pick<DbUser, \"user_id\">>(\r\n    loggedInUserId,\r\n    \"user_id\"\r\n  );\r\n\r\n  if (user === null) {\r\n    return json<LoaderData>({ type: \"error\", error: \"Tweets not found\" });\r\n  }\r\n\r\n  const { user_id } = user;\r\n\r\n  type SelectReturns = {\r\n    tweets: {\r\n      tweet_id: string; // UUID\r\n      message: string;\r\n      replied_to: string | null; // UUID\r\n      users: {\r\n        user_name: string;\r\n        profile_picture_url: string | null;\r\n      };\r\n      replies: string[]; // UUID[]\r\n    };\r\n  };\r\n\r\n  const allLikedTweets = await getTweetsUserHasBookmarked<SelectReturns>({\r\n    userId: user_id,\r\n    selectQuery: `tweets!fk_tweet_id (\r\n              tweet_id,\r\n              message,\r\n              replied_to,\r\n              users!fk_user_id (\r\n                  user_name,\r\n                  profile_picture_url\r\n              ),\r\n              replies\r\n          )`,\r\n  });\r\n\r\n  if (allLikedTweets === null) {\r\n    return json<LoaderData>({ type: \"error\", error: \"Tweets not found\" });\r\n  }\r\n\r\n  const convertToCorrectFormat: LoaderTweets[] = await Promise.all(\r\n    allLikedTweets.map(async ({ tweets }): Promise<LoaderTweets> => {\r\n      const likesCount = await getLikeCount({ tweetId: tweets.tweet_id });\r\n      const likeActive = await hasUserLikedTweet({\r\n        userId: loggedInUserId,\r\n        tweetId: tweets.tweet_id,\r\n      });\r\n      const bookmarkCount = await getBookmarkCount({\r\n        tweetId: tweets.tweet_id,\r\n      });\r\n      const bookmarkActive = await hasUserBookmarkedTweet({\r\n        userId: loggedInUserId,\r\n        tweetId: tweets.tweet_id,\r\n      });\r\n\r\n      return {\r\n        message: tweets.message,\r\n        tweetId: tweets.tweet_id,\r\n        userName: tweets.users.user_name,\r\n        repliesCount: tweets.replies.length,\r\n        repliedTo:\r\n          tweets.replied_to === null\r\n            ? undefined\r\n            : (await getTweetUserName(tweets.replied_to)) ?? undefined,\r\n        likeActive: likeActive ?? false,\r\n        likesCount: likesCount ?? 0,\r\n        bookmarkActive: bookmarkActive ?? false,\r\n        bookmarkCount: bookmarkCount ?? 0,\r\n        profilePictureUrl: tweets.users.profile_picture_url ?? \"\",\r\n      };\r\n    })\r\n  );\r\n\r\n  return json<LoaderData>({ type: \"success\", tweets: convertToCorrectFormat });\r\n};\r\n\r\nexport default function () {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n\r\n  if (loaderData.type === \"error\") return <div>{loaderData.error}</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-[600px] border-r border-gray-600 min-h-screen\">\r\n      <div className=\"sticky top-0 p-4 bg-black font-bold text-xl shadow bg-opacity-80\">\r\n        Bookmarks\r\n      </div>\r\n      <ol>\r\n        {loaderData.tweets.map(\r\n          ({\r\n            message,\r\n            repliesCount,\r\n            tweetId,\r\n            userName,\r\n            repliedTo,\r\n            likesCount,\r\n            likeActive,\r\n            bookmarkActive,\r\n            bookmarkCount,\r\n            profilePictureUrl,\r\n          }) => {\r\n            return (\r\n              <li key={tweetId} className=\"border-b border-gray-600\">\r\n                <Tweet\r\n                  likesCount={likesCount}\r\n                  message={message}\r\n                  relpiesCount={repliesCount}\r\n                  userName={userName}\r\n                  tweetId={tweetId}\r\n                  repliedTo={repliedTo}\r\n                  likeActive={likeActive}\r\n                  bookmarkActive={bookmarkActive}\r\n                  bookmarkCount={bookmarkCount}\r\n                  profilePictureUrl={profilePictureUrl}\r\n                />\r\n              </li>\r\n            );\r\n          }\r\n        )}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n", "import type { LoaderFunction } from \"@remix-run/node\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\nimport { Link, Outlet, useLoaderData, useLocation } from \"@remix-run/react\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport { getUserOfUserName } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"success\";\r\n      userName: string;\r\n      profilePictureUrl: string;\r\n      backgroundPictureUrl: string;\r\n      bio: string;\r\n    }\r\n  | { type: \"error\"; error: \"User not found\" };\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl);\r\n  }\r\n\r\n  const userName = params.user;\r\n\r\n  invariant(userName, \"Expected the route name to be $user\");\r\n\r\n  const user = await getUserOfUserName<\r\n    Pick<\r\n      DbUser,\r\n      | \"user_name\"\r\n      | \"user_id\"\r\n      | \"profile_picture_url\"\r\n      | \"background_picture_url\"\r\n      | \"bio\"\r\n    >\r\n  >(\r\n    userName,\r\n    \"user_name, user_id, profile_picture_url, background_picture_url, bio\"\r\n  );\r\n\r\n  if (user === null) {\r\n    return json<LoaderData>({ error: \"User not found\", type: \"error\" });\r\n  }\r\n\r\n  return json<LoaderData>({\r\n    userName: userName,\r\n    type: \"success\",\r\n    backgroundPictureUrl: user.background_picture_url ?? \"\",\r\n    profilePictureUrl: user.profile_picture_url ?? \"\",\r\n    bio: user.bio ?? \"\",\r\n  });\r\n};\r\n\r\nexport default function UserPage() {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n  const pathNames = useLocation().pathname.split(\"/\");\r\n\r\n  if (loaderData.type === \"error\") {\r\n    return <div>{loaderData.error}</div>;\r\n  }\r\n\r\n  const { userName, backgroundPictureUrl, profilePictureUrl, bio } = loaderData;\r\n\r\n  const isTweetActive =\r\n    decodeURIComponent(pathNames[pathNames.length - 1]) === userName;\r\n  const isTweetAndRepliesActive =\r\n    pathNames[pathNames.length - 1] === \"with_replies\";\r\n  const isLikesActive = pathNames[pathNames.length - 1] === \"likes\";\r\n\r\n  const userTweetsUrl = `${AppUrl.home}${userName}`;\r\n  const userTweetsWithRepliesUrl = `${AppUrl.home}${userName}/with_replies`;\r\n  const userLikesTweetsUrl = `${AppUrl.home}${userName}/likes`;\r\n\r\n  return (\r\n    <div className=\"max-w-[600px] border-r border-gray-600 min-h-screen\">\r\n      <div className=\"sticky top-0 p-4 bg-black font-bold text-xl shadow bg-opacity-80\">\r\n        {userName}\r\n      </div>\r\n      <div className=\"flex flex-col gap-y-8\">\r\n        <UserPicture\r\n          profilePictureUrl={profilePictureUrl}\r\n          backgroundPictureUrl={backgroundPictureUrl}\r\n        />\r\n        <div className=\"flex justify-end -mt-[75px] mr-4\">\r\n          <Link\r\n            to=\"../edit-profile\"\r\n            className=\"px-6 py-2 rounded-full border border-texter-gray text-texter-blue hover:border-texter-blue\"\r\n          >\r\n            Edit profile\r\n          </Link>\r\n        </div>\r\n        <div className=\"ml-4\">\r\n          <AboutUser userName={userName} bio={bio} />\r\n        </div>\r\n        <ul className=\"flex items-center border-b border-gray-600 text-texter-gray\">\r\n          <li className=\"flex-1\">\r\n            <TweetOptions\r\n              name=\"Tweets\"\r\n              to={userTweetsUrl}\r\n              active={isTweetActive}\r\n            />\r\n          </li>\r\n          <li className=\"flex-1\">\r\n            <TweetOptions\r\n              name=\"Tweets and replies\"\r\n              to={userTweetsWithRepliesUrl}\r\n              active={isTweetAndRepliesActive}\r\n            />\r\n          </li>\r\n          <li className=\"flex-1\">\r\n            <TweetOptions\r\n              name=\"Likes\"\r\n              to={userLikesTweetsUrl}\r\n              active={isLikesActive}\r\n            />\r\n          </li>\r\n        </ul>\r\n        <Outlet />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\ntype AboutUserProps = {\r\n  userName: string;\r\n  bio: string;\r\n};\r\n\r\nconst AboutUser = ({ userName, bio }: AboutUserProps) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-y-5\">\r\n      <h1 className=\"font-bold text-xl\">{userName}</h1>\r\n      <p className=\"text-sm\">{bio}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype UserPictureProps = {\r\n  profilePictureUrl: string;\r\n  backgroundPictureUrl: string;\r\n};\r\n\r\nconst UserPicture = ({\r\n  profilePictureUrl,\r\n  backgroundPictureUrl,\r\n}: UserPictureProps) => {\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"h-[200px] bg-texter-gray-dark bg-no-repeat bg-cover\"\r\n        style={{ backgroundImage: `url(${backgroundPictureUrl})` }}\r\n      >\r\n        {/* Background picture */}\r\n      </div>\r\n      <div>\r\n        {/* Profile picture */}\r\n        <div\r\n          className=\"w-[150px] h-[150px] bg-texter-blue rounded-full -mt-[75px] ml-4 border-4 border-black bg-no-repeat bg-cover\"\r\n          style={{ backgroundImage: `url(${profilePictureUrl})` }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype TweetOptionsProps = {\r\n  name: string;\r\n  to: string;\r\n  active: boolean;\r\n};\r\n\r\nconst TweetOptions = ({ name, to, active }: TweetOptionsProps) => {\r\n  return (\r\n    <Link\r\n      to={to}\r\n      className={`w-full grid place-items-center hover:bg-gray-900 py-3 ${\r\n        active ? \"text-white\" : \"\"\r\n      }`}\r\n    >\r\n      {name}\r\n    </Link>\r\n  );\r\n};\r\n", "import type { ActionFunction } from \"@remix-run/node\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport {\r\n  userBookmarkedTweet,\r\n  userRemovedBookmarkedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\nexport const action: ActionFunction = async ({ request, params }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    if (loggedInUserId === null) {\r\n      const requestUrl = new URL(request.url);\r\n\r\n      const searchParams = new URLSearchParams();\r\n\r\n      // Set redirectTo param so that once the user logged in we can\r\n      // redirect to the page they were on\r\n      searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n      const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n      return redirect(finalUrl);\r\n    }\r\n  }\r\n\r\n  const tweetId = await params.tweetId;\r\n\r\n  invariant(tweetId, \"Expected the dynamic route to be $tweetId\");\r\n\r\n  const formData = await request.formData();\r\n  const actionType = formData.get(\"actionType\");\r\n\r\n  if (actionType === \"bookmark\") {\r\n    const result = await userBookmarkedTweet({\r\n      userId: loggedInUserId,\r\n      tweetId,\r\n    });\r\n\r\n    if (result === null) {\r\n      return json({ error: \"Error adding bookmark\" });\r\n    }\r\n\r\n    return null;\r\n  } else if (actionType === \"removeBookmark\") {\r\n    const result = await userRemovedBookmarkedTweet({\r\n      tweetId,\r\n      userId: loggedInUserId,\r\n    });\r\n\r\n    if (result === null) {\r\n      return json({ error: \"Error in removing the bookmark\" });\r\n    }\r\n    return null;\r\n  } else {\r\n    return json({ error: \"Unknown action type\" });\r\n  }\r\n};\r\n", "import type { ActionFunction } from \"@remix-run/node\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport { userLikedTweet, userUnLikedTweet } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\nexport const action: ActionFunction = async ({ request, params }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    if (loggedInUserId === null) {\r\n      const requestUrl = new URL(request.url);\r\n\r\n      const searchParams = new URLSearchParams();\r\n\r\n      // Set redirectTo param so that once the user logged in we can\r\n      // redirect to the page they were on\r\n      searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n      const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n      return redirect(finalUrl);\r\n    }\r\n  }\r\n\r\n  const tweetId = await params.tweetId;\r\n\r\n  invariant(tweetId, \"Expected the dynamic route to be $tweetId\");\r\n\r\n  const formData = await request.formData();\r\n  const actionType = formData.get(\"actionType\");\r\n\r\n  if (actionType === \"like\") {\r\n    const result = await userLikedTweet({ userId: loggedInUserId, tweetId });\r\n\r\n    if (result === null) {\r\n      return json({ error: \"Error adding like\" });\r\n    }\r\n\r\n    return null;\r\n  } else if (actionType === \"unlike\") {\r\n    const result = await userUnLikedTweet({ tweetId, userId: loggedInUserId });\r\n\r\n    if (result === null) {\r\n      return json({ error: \"Error in removing the like\" });\r\n    }\r\n    return null;\r\n  } else {\r\n    return json({ error: \"Unknown action type\" });\r\n  }\r\n};\r\n", "import type { LoaderFunction } from \"@remix-run/node\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport { useLoaderData } from \"@remix-run/react\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport type { DbTweets, DbUser } from \"~/server/supabase.server\";\r\nimport {\r\n  getBookmarkCount,\r\n  getLikeCount,\r\n  hasUserBookmarkedTweet,\r\n  hasUserLikedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport { getTweetUserName } from \"~/server/supabase.server\";\r\nimport { getAllTweetsFromUser } from \"~/server/supabase.server\";\r\nimport { getUserOfUserName } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { Tweet } from \"~/components/tweet\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"success\";\r\n      tweets: {\r\n        userName: string;\r\n        message: string;\r\n        tweetId: string;\r\n        repliedTo?: string;\r\n        repliesCount: number;\r\n        likesCount: number;\r\n        likeActive: boolean;\r\n        bookmarkCount: number;\r\n        bookmarkActive: boolean;\r\n        profilePictureUrl: string;\r\n      }[];\r\n    }\r\n  | { type: \"error\"; error: \"User not found\" | \"Tweets not found\" };\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl);\r\n  }\r\n\r\n  const userName = params.user;\r\n\r\n  invariant(userName, \"Expected the dynamic route $user\");\r\n\r\n  const user = await getUserOfUserName<DbUser>(userName, \"*\");\r\n\r\n  if (user === null) {\r\n    return json<LoaderData>({ error: \"User not found\", type: \"error\" });\r\n  }\r\n\r\n  const { user_id: userId } = user;\r\n\r\n  const allTweetsSelectQuery =\r\n    \"tweet_id, message, replied_to, replies, users!fk_user_id(profile_picture_url)\";\r\n  type AllTweetQueryResult = {\r\n    tweet_id: string;\r\n    message: string;\r\n    replied_to: string | null;\r\n    replies: string[];\r\n    users: {\r\n      profile_picture_url: string | null;\r\n    };\r\n  };\r\n  const allTweets = await getAllTweetsFromUser<AllTweetQueryResult>({\r\n    userId,\r\n    selectQuery: allTweetsSelectQuery,\r\n  });\r\n  if (allTweets === null) {\r\n    return json<LoaderData>({ error: \"Tweets not found\", type: \"error\" });\r\n  }\r\n\r\n  const tweetsWithRepliesCount = await Promise.all(\r\n    allTweets.map(async (reply) => {\r\n      const repliedTo = reply.replied_to\r\n        ? await getTweetUserName(reply.replied_to)\r\n        : null;\r\n\r\n      const likesCount = (await getLikeCount({ tweetId: reply.tweet_id })) ?? 0;\r\n      const likeActive =\r\n        (await hasUserLikedTweet({\r\n          userId: loggedInUserId,\r\n          tweetId: reply.tweet_id,\r\n        })) ?? false;\r\n\r\n      const bookmarkCount =\r\n        (await getBookmarkCount({ tweetId: reply.tweet_id })) ?? 0;\r\n      const bookmarkActive =\r\n        (await hasUserBookmarkedTweet({\r\n          userId: loggedInUserId,\r\n          tweetId: reply.tweet_id,\r\n        })) ?? false;\r\n\r\n      return {\r\n        userName,\r\n        tweetId: reply.tweet_id,\r\n        message: reply.message,\r\n        repliesCount: reply.replies.length,\r\n        repliedTo: repliedTo ?? undefined,\r\n        likesCount: likesCount,\r\n        likeActive: likeActive,\r\n        bookmarkCount,\r\n        bookmarkActive,\r\n        profilePictureUrl: reply.users.profile_picture_url ?? \"\",\r\n      };\r\n    })\r\n  );\r\n\r\n  return json<LoaderData>({ type: \"success\", tweets: tweetsWithRepliesCount });\r\n};\r\n\r\nexport default function TweetsFromUser() {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n\r\n  if (loaderData.type === \"error\") return <div>{loaderData.error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <ol>\r\n        {loaderData.tweets.map(\r\n          ({\r\n            message,\r\n            repliesCount,\r\n            tweetId,\r\n            userName,\r\n            repliedTo,\r\n            likesCount,\r\n            likeActive,\r\n            bookmarkActive,\r\n            bookmarkCount,\r\n            profilePictureUrl,\r\n          }) => {\r\n            return (\r\n              <li key={tweetId} className=\"border-b border-gray-600\">\r\n                <Tweet\r\n                  likesCount={likesCount}\r\n                  message={message}\r\n                  relpiesCount={repliesCount}\r\n                  userName={userName}\r\n                  tweetId={tweetId}\r\n                  repliedTo={repliedTo}\r\n                  likeActive={likeActive}\r\n                  bookmarkActive={bookmarkActive}\r\n                  bookmarkCount={bookmarkCount}\r\n                  profilePictureUrl={profilePictureUrl}\r\n                />\r\n              </li>\r\n            );\r\n          }\r\n        )}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n", "import type { LoaderFunction } from \"@remix-run/node\";\r\nimport { json, redirect } from \"@remix-run/node\";\r\nimport { useLoaderData } from \"@remix-run/react\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport type { DbTweets, DbUser } from \"~/server/supabase.server\";\r\nimport {\r\n  getBookmarkCount,\r\n  hasUserBookmarkedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport { hasUserLikedTweet } from \"~/server/supabase.server\";\r\nimport { getLikeCount } from \"~/server/supabase.server\";\r\nimport { getAllTweetsFromUser } from \"~/server/supabase.server\";\r\nimport { getUserOfUserName } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { Tweet } from \"~/components/tweet\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"success\";\r\n      tweets: {\r\n        userName: string;\r\n        message: string;\r\n        tweetId: string;\r\n        repliedTo?: string;\r\n        repliesCount: number;\r\n        likesCount: number;\r\n        likeActive: boolean;\r\n        bookmarkActive: boolean;\r\n        bookmarkCount: number;\r\n        profilePictureUrl: string;\r\n      }[];\r\n    }\r\n  | { type: \"error\"; error: \"User not found\" | \"Tweets not found\" };\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl);\r\n  }\r\n\r\n  const userName = params.user;\r\n\r\n  invariant(userName, \"Expected the dynamic route $user\");\r\n\r\n  const user = await getUserOfUserName<DbUser>(userName, \"*\");\r\n\r\n  if (user === null) {\r\n    return json<LoaderData>({ error: \"User not found\", type: \"error\" });\r\n  }\r\n\r\n  const { user_id: userId } = user;\r\n\r\n  const allTweetsSelectQuery =\r\n    \"tweet_id, message, replied_to, replies, users!fk_user_id(profile_picture_url)\";\r\n\r\n  type AllTweetsQueryResult = {\r\n    message: string;\r\n    replied_to: string | null;\r\n    replies: string[];\r\n    tweet_id: string;\r\n    users: {\r\n      profile_picture_url: string;\r\n    };\r\n  };\r\n\r\n  const allTweets = await getAllTweetsFromUser<AllTweetsQueryResult>({\r\n    userId,\r\n    selectQuery: allTweetsSelectQuery,\r\n    includeReplies: false, // Do not include replies\r\n  });\r\n\r\n  if (allTweets === null) {\r\n    return json<LoaderData>({ error: \"Tweets not found\", type: \"error\" });\r\n  }\r\n\r\n  const tweetsWithRepliesCount = await Promise.all(\r\n    allTweets.map(async (reply) => {\r\n      return {\r\n        userName,\r\n        tweetId: reply.tweet_id,\r\n        message: reply.message,\r\n        repliesCount: reply.replies.length,\r\n        replied_to: undefined,\r\n        likesCount: (await getLikeCount({ tweetId: reply.tweet_id })) ?? 0,\r\n        likeActive:\r\n          (await hasUserLikedTweet({\r\n            userId: loggedInUserId,\r\n            tweetId: reply.tweet_id,\r\n          })) ?? false,\r\n        bookmarkCount:\r\n          (await getBookmarkCount({ tweetId: reply.tweet_id })) ?? 0,\r\n        bookmarkActive:\r\n          (await hasUserBookmarkedTweet({\r\n            userId: loggedInUserId,\r\n            tweetId: reply.tweet_id,\r\n          })) ?? false,\r\n        profilePictureUrl: reply.users.profile_picture_url ?? \"\",\r\n      };\r\n    })\r\n  );\r\n\r\n  return json<LoaderData>({ type: \"success\", tweets: tweetsWithRepliesCount });\r\n};\r\n\r\nexport default function TweetsFromUser() {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n\r\n  if (loaderData.type === \"error\") return <div>{loaderData.error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <ol>\r\n        {loaderData.tweets.map(\r\n          ({\r\n            message,\r\n            repliesCount,\r\n            tweetId,\r\n            userName,\r\n            repliedTo,\r\n            likesCount,\r\n            likeActive,\r\n            bookmarkActive,\r\n            bookmarkCount,\r\n            profilePictureUrl,\r\n          }) => {\r\n            return (\r\n              <li key={tweetId} className=\"border-b border-gray-600\">\r\n                <Tweet\r\n                  likesCount={likesCount}\r\n                  message={message}\r\n                  relpiesCount={repliesCount}\r\n                  userName={userName}\r\n                  tweetId={tweetId}\r\n                  repliedTo={repliedTo}\r\n                  likeActive={likeActive}\r\n                  bookmarkActive={bookmarkActive}\r\n                  bookmarkCount={bookmarkCount}\r\n                  profilePictureUrl={profilePictureUrl}\r\n                />\r\n              </li>\r\n            );\r\n          }\r\n        )}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n", "import type { LoaderFunction } from \"@remix-run/node\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { useLoaderData } from \"@remix-run/react\";\r\nimport { Tweet } from \"~/components/tweet\";\r\nimport { getUserId } from \"~/server/session.server\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport {\r\n  getBookmarkCount,\r\n  hasUserBookmarkedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport {\r\n  getLikeCount,\r\n  getTweetsUserHasLiked,\r\n  getTweetUserName,\r\n  getUserOfUserName,\r\n  hasUserLikedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport { invariant } from \"~/utils/utils\";\r\n\r\ntype LoaderTweets = {\r\n  userName: string;\r\n  message: string;\r\n  tweetId: string;\r\n  repliedTo?: string;\r\n  repliesCount: number;\r\n  likesCount: number;\r\n  likeActive: boolean;\r\n  bookmarkCount: number;\r\n  bookmarkActive: boolean;\r\n  profilePictureUrl: string;\r\n};\r\n\r\ntype LoaderData =\r\n  | {\r\n      type: \"success\";\r\n      tweets: LoaderTweets[];\r\n    }\r\n  | { type: \"error\"; error: \"User not found\" | \"Tweets not found\" };\r\n\r\nexport const loader: LoaderFunction = async ({ request, params }) => {\r\n  const loggedInUserId = (await getUserId(request))!;\r\n\r\n  const userName = params.user;\r\n\r\n  invariant(userName, \"Expected route to have a dynamic route $user\");\r\n\r\n  const user = await getUserOfUserName<Pick<DbUser, \"user_id\">>(userName);\r\n\r\n  if (user === null) {\r\n    return json<LoaderData>({ type: \"error\", error: \"Tweets not found\" });\r\n  }\r\n\r\n  const { user_id } = user;\r\n\r\n  type SelectReturns = {\r\n    tweets: {\r\n      tweet_id: string; // UUID\r\n      message: string;\r\n      replied_to: string | null; // UUID\r\n      users: {\r\n        user_name: string;\r\n        profile_picture_url: string | null;\r\n      };\r\n      replies: string[]; // UUID[]\r\n    };\r\n  };\r\n\r\n  const allLikedTweets = await getTweetsUserHasLiked<SelectReturns>({\r\n    userId: user_id,\r\n    selectQuery: `tweets!fk_tweet_id (\r\n        tweet_id,\r\n        message,\r\n        replied_to,\r\n        users!fk_user_id (\r\n            user_name,\r\n            profile_picture_url\r\n        ),\r\n        replies\r\n    )`,\r\n  });\r\n\r\n  if (allLikedTweets === null) {\r\n    return json<LoaderData>({ type: \"error\", error: \"Tweets not found\" });\r\n  }\r\n\r\n  const convertToCorrectFormat: LoaderTweets[] = await Promise.all(\r\n    allLikedTweets.map(async ({ tweets }): Promise<LoaderTweets> => {\r\n      const likesCount = await getLikeCount({ tweetId: tweets.tweet_id });\r\n      const likeActive = await hasUserLikedTweet({\r\n        userId: loggedInUserId,\r\n        tweetId: tweets.tweet_id,\r\n      });\r\n      const bookmarkCount = await getBookmarkCount({\r\n        tweetId: tweets.tweet_id,\r\n      });\r\n      const bookmarkActive = await hasUserBookmarkedTweet({\r\n        userId: loggedInUserId,\r\n        tweetId: tweets.tweet_id,\r\n      });\r\n\r\n      return {\r\n        message: tweets.message,\r\n        tweetId: tweets.tweet_id,\r\n        userName: tweets.users.user_name,\r\n        repliesCount: tweets.replies.length,\r\n        repliedTo:\r\n          tweets.replied_to === null\r\n            ? undefined\r\n            : (await getTweetUserName(tweets.replied_to)) ?? undefined,\r\n        likeActive: likeActive ?? false,\r\n        likesCount: likesCount ?? 0,\r\n        bookmarkActive: bookmarkActive ?? false,\r\n        bookmarkCount: bookmarkCount ?? 0,\r\n        profilePictureUrl: tweets.users.profile_picture_url ?? \"\",\r\n      };\r\n    })\r\n  );\r\n\r\n  return json<LoaderData>({ type: \"success\", tweets: convertToCorrectFormat });\r\n\r\n  //   const allLikedTweets = await getTweetsUserHasLiked({selectQuery : \"\", userId })\r\n};\r\n\r\nexport default function () {\r\n  const loaderData = useLoaderData<LoaderData>();\r\n\r\n  if (loaderData.type === \"error\") return <div>{loaderData.error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <ol>\r\n          {loaderData.tweets.map(\r\n            ({\r\n              message,\r\n              repliesCount,\r\n              tweetId,\r\n              userName,\r\n              repliedTo,\r\n              likesCount,\r\n              likeActive,\r\n              bookmarkActive,\r\n              bookmarkCount,\r\n              profilePictureUrl,\r\n            }) => {\r\n              return (\r\n                <li key={tweetId} className=\"border-b border-gray-600\">\r\n                  <Tweet\r\n                    likesCount={likesCount}\r\n                    message={message}\r\n                    relpiesCount={repliesCount}\r\n                    userName={userName}\r\n                    tweetId={tweetId}\r\n                    repliedTo={repliedTo}\r\n                    likeActive={likeActive}\r\n                    bookmarkActive={bookmarkActive}\r\n                    bookmarkCount={bookmarkCount}\r\n                    profilePictureUrl={profilePictureUrl}\r\n                  />\r\n                </li>\r\n              );\r\n            }\r\n          )}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n", "import { json, redirect } from \"@remix-run/node\";\r\nimport type { LoaderFunction, ActionFunction } from \"@remix-run/node\";\r\nimport {\r\n  getUserId,\r\n  getUserSession,\r\n  sessionStorage,\r\n} from \"~/server/session.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport {\r\n  getBookmarkCount,\r\n  hasUserBookmarkedTweet,\r\n} from \"~/server/supabase.server\";\r\nimport { getLikeCount, hasUserLikedTweet } from \"~/server/supabase.server\";\r\nimport { getTweetUserName, getUserOfUserId } from \"~/server/supabase.server\";\r\nimport { getLatestTweets } from \"~/server/supabase.server\";\r\nimport { insertTweetFromUser } from \"~/server/supabase.server\";\r\nimport { useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport { SendTweet } from \"~/components/sendTweet\";\r\nimport { Tweet } from \"~/components/tweet\";\r\n\r\ntype LoaderData = {\r\n  tweets: {\r\n    userName: string;\r\n    message: string;\r\n    tweetId: string;\r\n    repliedTo?: string;\r\n    repliesCount: number;\r\n    likesCount: number;\r\n    likeActive: boolean;\r\n    bookmarkCount: number;\r\n    bookmarkActive: boolean;\r\n    profilePictureUrl: string;\r\n  }[];\r\n  loggedInUserName: string;\r\n  loggedInProfilePictureUrl: string;\r\n};\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl);\r\n  }\r\n\r\n  const loggedInUser = await getUserOfUserId<\r\n    Pick<DbUser, \"user_name\" | \"profile_picture_url\">\r\n  >(loggedInUserId, \"user_name, profile_picture_url\");\r\n\r\n  if (loggedInUser === null) {\r\n    // There is no user with that name\r\n\r\n    const userSession = await getUserSession(request);\r\n\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl, {\r\n      headers: {\r\n        \"Set-Cookie\": await sessionStorage.destroySession(userSession),\r\n      },\r\n    });\r\n  }\r\n\r\n  const { user_name: loggedInUserName } = loggedInUser;\r\n\r\n  const latest10Tweets = await getLatestTweets<{\r\n    message: string;\r\n    tweet_id: string;\r\n    users: { user_name: string; profile_picture_url: string | null };\r\n    replied_to: string | null;\r\n    replies: string[];\r\n  }>({\r\n    count: 10,\r\n    selectQuery: `message, tweet_id, users!fk_user_id (user_name, profile_picture_url), replied_to, replies`,\r\n  });\r\n  if (latest10Tweets === null) {\r\n    // Something is wrong with getting data from database\r\n    return json<LoaderData>({\r\n      tweets: [],\r\n      loggedInUserName,\r\n      loggedInProfilePictureUrl: loggedInUser.profile_picture_url ?? \"\",\r\n    });\r\n  }\r\n\r\n  const latestTweetsWithRepliedTo = await Promise.all(\r\n    latest10Tweets.map(\r\n      async ({ message, tweet_id, users, replied_to, replies }) => {\r\n        const repliedToPromise =\r\n          replied_to === null ? null : getTweetUserName(replied_to);\r\n        const likesCountPromise = getLikeCount({ tweetId: tweet_id });\r\n\r\n        const likeActivePromise = hasUserLikedTweet({\r\n          userId: loggedInUserId,\r\n          tweetId: tweet_id,\r\n        });\r\n\r\n        const bookmarkCountPromise = getBookmarkCount({ tweetId: tweet_id });\r\n\r\n        const bookmarkActivePromise = hasUserBookmarkedTweet({\r\n          userId: loggedInUserId,\r\n          tweetId: tweet_id,\r\n        });\r\n\r\n        const [\r\n          repliedTo,\r\n          likesCount,\r\n          likeActive,\r\n          bookmarkCount,\r\n          bookmarkActive,\r\n        ] = await Promise.all([\r\n          repliedToPromise,\r\n          likesCountPromise,\r\n          likeActivePromise,\r\n          bookmarkCountPromise,\r\n          bookmarkActivePromise,\r\n        ]);\r\n\r\n        return {\r\n          message,\r\n          tweetId: tweet_id,\r\n          userName: users.user_name,\r\n          repliedTo: repliedTo ?? undefined,\r\n          repliesCount: replies.length,\r\n          likesCount: likesCount ?? 0,\r\n          likeActive: likeActive ?? false,\r\n          bookmarkCount: bookmarkCount ?? 0,\r\n          bookmarkActive: bookmarkActive ?? false,\r\n          profilePictureUrl: users.profile_picture_url ?? \"\",\r\n        };\r\n      }\r\n    )\r\n  );\r\n\r\n  return json<LoaderData>({\r\n    tweets: latestTweetsWithRepliedTo,\r\n    loggedInUserName,\r\n    loggedInProfilePictureUrl: loggedInUser.profile_picture_url ?? \"\",\r\n  });\r\n};\r\n\r\ntype ActionData = {\r\n  error: string;\r\n};\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const loggedInUserId = await getUserId(request);\r\n\r\n  if (loggedInUserId === null) {\r\n    const requestUrl = new URL(request.url);\r\n\r\n    const searchParams = new URLSearchParams();\r\n\r\n    // Set redirectTo param so that once the user logged in we can\r\n    // redirect to the page they were on\r\n    searchParams.set(\"redirectTo\", requestUrl.pathname);\r\n\r\n    const finalUrl = `${AppUrl.join}?${searchParams}`;\r\n    return redirect(finalUrl);\r\n  }\r\n\r\n  const formData = await request.formData();\r\n\r\n  const actionType = formData.get(\"actionType\");\r\n\r\n  if (typeof actionType !== \"string\") {\r\n    return json<ActionData>({ error: \"Invalid action type\" });\r\n  }\r\n\r\n  if (actionType === \"tweet\") {\r\n    const message = formData.get(\"message\");\r\n\r\n    if (!message || typeof message !== \"string\")\r\n      return json<ActionData>({ error: \"Enter a valid message\" });\r\n\r\n    const insertTweetQuery = await insertTweetFromUser({\r\n      userId: loggedInUserId,\r\n      message: message,\r\n    });\r\n\r\n    if (insertTweetQuery === null)\r\n      return json<ActionData>({ error: \"Invalid action type\" });\r\n\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default function () {\r\n  const { tweets, loggedInUserName, loggedInProfilePictureUrl } =\r\n    useLoaderData<LoaderData>();\r\n  const userUrl = `${AppUrl.home}${loggedInUserName}`;\r\n  const actionData = useActionData<ActionData>();\r\n  return (\r\n    <>\r\n      <div className=\"sticky top-0 p-4 bg-black font-bold text-xl shadow bg-opacity-80\">\r\n        Home\r\n      </div>\r\n\r\n      <div className=\"max-w-[600px] border-r border-gray-600 min-h-screen\">\r\n        <div className=\"border-b border-gray-600\">\r\n          <SendTweet\r\n            error={actionData?.error}\r\n            userUrl={userUrl}\r\n            profilePictureUrl={loggedInProfilePictureUrl}\r\n          />\r\n        </div>\r\n        <ol>\r\n          {tweets.map(\r\n            (\r\n              {\r\n                message,\r\n                tweetId,\r\n                userName,\r\n                repliedTo,\r\n                repliesCount,\r\n                likesCount,\r\n                likeActive,\r\n                bookmarkActive,\r\n                bookmarkCount,\r\n                profilePictureUrl,\r\n              },\r\n              i\r\n            ) => {\r\n              return (\r\n                <li key={tweetId} className=\"border-b border-gray-600\">\r\n                  <Tweet\r\n                    message={message}\r\n                    tweetId={tweetId}\r\n                    userName={userName}\r\n                    repliedTo={repliedTo}\r\n                    relpiesCount={repliesCount}\r\n                    likesCount={likesCount}\r\n                    likeActive={likeActive}\r\n                    bookmarkActive={bookmarkActive}\r\n                    bookmarkCount={bookmarkCount}\r\n                    profilePictureUrl={profilePictureUrl}\r\n                  />\r\n                </li>\r\n              );\r\n            }\r\n          )}\r\n        </ol>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n", "import { Form, useTransition } from \"@remix-run/react\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { TexterTextArea } from \"./texterTextArea\";\r\n\r\nexport type SendTweetProps = {\r\n  error?: string;\r\n  userUrl: string;\r\n  profilePictureUrl: string;\r\n};\r\n\r\nexport const SendTweet = ({\r\n  error,\r\n  userUrl,\r\n  profilePictureUrl,\r\n}: SendTweetProps) => {\r\n  const transition = useTransition();\r\n  const formRef = useRef<HTMLFormElement | null>(null);\r\n  const isSubmiting = transition.state === \"submitting\";\r\n\r\n  useEffect(() => {\r\n    if (!isSubmiting) {\r\n      formRef?.current?.reset();\r\n    }\r\n  }, [isSubmiting]);\r\n\r\n  return (\r\n    <Form method=\"post\" className=\"flex flex-col gap-y-5 py-5\" ref={formRef}>\r\n      <TexterTextArea\r\n        name=\"message\"\r\n        placeholder=\"Whats Happening?\"\r\n        errorMessage={error}\r\n        autoFocus\r\n        label=\"Send Tweet\"\r\n        userUrl={userUrl}\r\n        profilePictureUrl={profilePictureUrl}\r\n      />\r\n      <div className=\"flex justify-end mr-3\">\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-texter-blue hover:bg-texter-blue-dark px-5 py-2 rounded-full\"\r\n          name=\"actionType\"\r\n          value=\"tweet\"\r\n        >\r\n          Tweet\r\n        </button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n", "import type { ActionFunction } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\nimport { getUserSession, sessionStorage } from \"~/server/session.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const userSession = await getUserSession(request);\r\n\r\n  return redirect(AppUrl.home, {\r\n    headers: { \"Set-Cookie\": await sessionStorage.destroySession(userSession) },\r\n  });\r\n};\r\n", "import type {\r\n  ActionFunction,\r\n  LinksFunction,\r\n  LoaderFunction,\r\n  MetaFunction,\r\n} from \"@remix-run/node\";\r\nimport { json } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLocation } from \"@remix-run/react\";\r\nimport { compare, hash } from \"bcryptjs\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  getUserId,\r\n  getUserSession,\r\n  sessionStorage,\r\n} from \"~/server/session.server\";\r\nimport type { DbUser } from \"~/server/supabase.server\";\r\nimport { insertUserWithPassword } from \"~/server/supabase.server\";\r\nimport { getUserOfUserName } from \"~/server/supabase.server\";\r\nimport { AppUrl } from \"~/utils/url\";\r\nimport { GrTwitter } from \"react-icons/gr\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\nimport twitterLoginPic from \"~/images/twitter-login.png\";\r\nimport { TexterInput } from \"~/components/texterInput\";\r\nimport { FormButton } from \"~/components/formButton\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport const loader: LoaderFunction = async ({ request }) => {\r\n  const userId = await getUserId(request);\r\n  const url = new URL(request.url);\r\n  const search = url.searchParams;\r\n  const redirectUrl = search.get(\"redirectTo\") ?? AppUrl.home;\r\n\r\n  if (userId !== null) {\r\n    return redirect(redirectUrl);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\ntype ActionData = {\r\n  userNameError: string | null;\r\n  passwordError: string | null;\r\n} | null;\r\n\r\n/**\r\n * Validates the username is not empty and of type string\r\n *\r\n * @param userName - username field from the formdata\r\n * @returns If there is error in username returns the error message, otherwise null\r\n */\r\nconst validateUserName = (userName: FormDataEntryValue | null) => {\r\n  if (userName && typeof userName === \"string\") {\r\n    return null;\r\n  }\r\n\r\n  return \"Username is required\";\r\n};\r\n/**\r\n * Validates the password is not empty and of type string\r\n *\r\n * @param password - password field from the formdata\r\n * @returns If there is error in password returns the error message, otherwise null\r\n */\r\nconst validatePassword = (password: FormDataEntryValue | null) => {\r\n  if (password && typeof password === \"string\") {\r\n    return null;\r\n  }\r\n\r\n  return \"Password is required\";\r\n};\r\n\r\n/**\r\n   * Verifies the given information with database and return the userId of verified user\r\n  \r\n   *\r\n   * @param userName - username field from the formdata\r\n   * @param password  - password field from the formdata\r\n   * @returns if the verification passes it returns `{type : \"success\", userId : string}` where userId is the \r\n   * `user_id` of the verified user, otherwise it returns `{type : \"error\", actionData : ActionData}` where\r\n   * `actionData` is populated with error message\r\n   */\r\nconst verifyUserPassword = async (\r\n  userName: string,\r\n  password: string\r\n): Promise<\r\n  | { type: \"success\"; userId: string }\r\n  | { type: \"error\"; actionData: ActionData }\r\n> => {\r\n  const user = await getUserOfUserName<DbUser>(\r\n    userName,\r\n    \"user_id, user_name, password_hash\"\r\n  );\r\n\r\n  if (user === null) {\r\n    return {\r\n      type: \"error\",\r\n      actionData: {\r\n        userNameError: \"Username and password does not match\",\r\n        passwordError: \"Username and password does not match\",\r\n      },\r\n    };\r\n  }\r\n\r\n  const isCorrectPassword = await compare(password, user.password_hash);\r\n\r\n  if (!isCorrectPassword) {\r\n    return {\r\n      type: \"error\",\r\n      actionData: {\r\n        userNameError: \"Username and password does not match\",\r\n        passwordError: \"Username and password does not match\",\r\n      },\r\n    };\r\n  }\r\n\r\n  return { type: \"success\", userId: user.user_id };\r\n};\r\n\r\n/**\r\n * Creates a new user with the given username and password, password is hashed through bcrypt\r\n *\r\n *\r\n * @param userName - username field from the formdata\r\n * @param password - password field from the formdata\r\n * @returns if the action is successfull return `{type : \"success\", userId : <user_id> }` where userId is the\r\n * `userId` of newly created user, otherwise it returns `{type : \"error\", actionData : ActionData }` where `actionData` is\r\n * populated with error message\r\n */\r\nconst createUserWithUserNameAndPassword = async (\r\n  userName: string,\r\n  password: string\r\n): Promise<\r\n  | { type: \"success\"; userId: string }\r\n  | { type: \"error\"; actionData: ActionData }\r\n> => {\r\n  const passwordHash = await hash(password, 10);\r\n  const userId = await insertUserWithPassword({ userName, passwordHash });\r\n\r\n  if (userId === null) {\r\n    return {\r\n      type: \"error\",\r\n      actionData: {\r\n        userNameError: \"Username is not valid\",\r\n        passwordError: null,\r\n      },\r\n    };\r\n  }\r\n\r\n  return { type: \"success\", userId };\r\n};\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  const formdata = await request.formData();\r\n  const userSession = await getUserSession(request);\r\n\r\n  const actionType = formdata.get(\"actionType\"); // can be \"login\" | \"signUp\" | \"guest\"\r\n\r\n  if (typeof actionType !== \"string\")\r\n    return json<ActionData>({\r\n      userNameError: \"Action type is required\",\r\n      passwordError: \"Action type is required\",\r\n    });\r\n\r\n  if (actionType === \"guest\") {\r\n    // Used for accessing the site without username and password\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      const guestUsername = `user${nanoid(6)}`; // guest user will be `user<6 digit random number>`;\r\n      const guestPassword = nanoid(); // randomly generated password so that onces the user logsout, user cannot login to same id\r\n\r\n      const actionResult = await createUserWithUserNameAndPassword(\r\n        guestUsername,\r\n        guestPassword\r\n      );\r\n\r\n      if (actionResult.type === \"error\") {\r\n        // We may have generated a duplicate  guestUserName,so we will try again\r\n        continue;\r\n      }\r\n\r\n      userSession.set(\"userId\", actionResult.userId);\r\n      break;\r\n    }\r\n  } else {\r\n    const formUserName = formdata.get(\"username\");\r\n    const formPassword = formdata.get(\"password\");\r\n    const userNameError = validateUserName(formUserName);\r\n    const passwordError = validatePassword(formPassword);\r\n\r\n    if (typeof userNameError === \"string\" || typeof passwordError === \"string\")\r\n      return json<ActionData>({ userNameError, passwordError });\r\n\r\n    const userName = formUserName as string;\r\n    const password = formPassword as string;\r\n\r\n    const actionResult = await (actionType === \"login\"\r\n      ? verifyUserPassword(userName, password)\r\n      : createUserWithUserNameAndPassword(userName, password));\r\n\r\n    if (actionResult.type === \"error\") {\r\n      return json<ActionData>(actionResult.actionData);\r\n    }\r\n\r\n    userSession.set(\"userId\", actionResult.userId);\r\n  }\r\n\r\n  // Get redirectTo query from the url, if not empty redirect to that page\r\n  // or else redirectTo home page\r\n  const requestSearchParams = new URL(request.url).searchParams;\r\n  const redirectTo = requestSearchParams.get(\"redirectTo\") ?? AppUrl.home;\r\n\r\n  return redirect(redirectTo, {\r\n    headers: {\r\n      \"Set-Cookie\": await sessionStorage.commitSession(userSession),\r\n    },\r\n  });\r\n};\r\n\r\nexport const meta: MetaFunction = () => {\r\n  return { title: \"Login to texter\" };\r\n};\r\n\r\nexport const links: LinksFunction = () => {\r\n  return [{ href: twitterLoginPic, rel: \"reload\", as: \"image\" }];\r\n};\r\n\r\ntype CurrentPage = \"WELCOME\" | \"LOGIN\" | \"SIGN UP\";\r\n\r\nexport default function JoinPage() {\r\n  const [currentPage, setCurrentPage] = useState<CurrentPage>(\"WELCOME\");\r\n\r\n  return (\r\n    <div className=\"h-full flex flex-row-reverse flex-wrap\">\r\n      <RenderJoinPage\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n      <div\r\n        className=\"min-h-screen bg-texter-blue flex-1 grid place-items-center\"\r\n        style={{ backgroundImage: `url(${twitterLoginPic})` }}\r\n      >\r\n        <GrTwitter color=\"white\" size=\"360px\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ntype RenderTwitterPageProps = {\r\n  currentPage: CurrentPage;\r\n  setCurrentPage: React.Dispatch<React.SetStateAction<CurrentPage>>;\r\n};\r\n\r\nexport const RenderJoinPage = ({\r\n  currentPage,\r\n  setCurrentPage,\r\n}: RenderTwitterPageProps) => {\r\n  if (currentPage === \"WELCOME\")\r\n    return <JoinWelcome setCurrentPage={setCurrentPage} />;\r\n\r\n  if (currentPage === \"LOGIN\")\r\n    return <JoinTexter setCurrentPage={setCurrentPage} actionType=\"login\" />;\r\n\r\n  if (currentPage === \"SIGN UP\")\r\n    return <JoinTexter setCurrentPage={setCurrentPage} actionType=\"signUp\" />;\r\n\r\n  return null;\r\n};\r\n\r\ntype JoinWelcomeProps = {\r\n  setCurrentPage: React.Dispatch<React.SetStateAction<CurrentPage>>;\r\n};\r\n\r\nconst JoinWelcome = ({ setCurrentPage }: JoinWelcomeProps) => {\r\n  const location = useLocation();\r\n\r\n  const onSignIn = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    setCurrentPage(\"LOGIN\");\r\n  };\r\n\r\n  const onCreateYourAccount = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    setCurrentPage(\"SIGN UP\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex-1 min-w-[50vw] grid place-items-center md:block\">\r\n      <div className=\"h-full py-[36px] px-[36px]\">\r\n        <GrTwitter color=\"white\" size=\"50px\" className=\"mb-4\" />\r\n        <div className=\"flex flex-col gap-y-10\">\r\n          <h1 className=\"font-bold md:text-7xl text-5xl leading-tight my-10\">\r\n            Happening now\r\n          </h1>\r\n          <div className=\"mb-10\">\r\n            <p className=\"font-bold text-2xl md:text-4xl pb-6\">\r\n              Join Texter today\r\n            </p>\r\n            <div className=\"inline-flex flex-col gap-y-4\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"border-2 border-texter-blue bg-texter-blue rounded-full hover:bg-texter-blue-dark\"\r\n                onClick={onCreateYourAccount}\r\n              >\r\n                <div className=\"md:min-w-[300px] min-h-[40px] inline-grid place-items-center\">\r\n                  Create your account\r\n                </div>\r\n              </button>\r\n              <FormButton\r\n                method=\"post\"\r\n                action={`${location.pathname}${location.search}`}\r\n                type=\"submit\"\r\n                name=\"actionType\"\r\n                value=\"guest\"\r\n                className=\"rounded-full border border-gray-300  text-texter-blue hover:border-texter-blue\"\r\n              >\r\n                <span className=\"min-w-[300px] min-h-[40px] inline-grid place-items-center\">\r\n                  Log in with a guest account\r\n                </span>\r\n              </FormButton>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <p className=\"text-base font-bold pb-6\">Already have an account?</p>\r\n            <button className=\"rounded-full border border-gray-300  text-texter-blue hover:border-texter-blue\">\r\n              <span\r\n                className=\"min-w-[300px] min-h-[40px] inline-grid place-items-center\"\r\n                onClick={onSignIn}\r\n              >\r\n                Log in\r\n              </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type JoinTexterProps = {\r\n  setCurrentPage: React.Dispatch<React.SetStateAction<CurrentPage>>;\r\n  actionType: \"login\" | \"signUp\";\r\n};\r\n\r\nconst JoinTexter = ({ setCurrentPage, actionType }: JoinTexterProps) => {\r\n  const location = useLocation();\r\n  const actionData = useActionData<ActionData>();\r\n\r\n  const isLogin = actionType === \"login\";\r\n\r\n  const onCloseClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    setCurrentPage(\"WELCOME\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex-1 min-w-[50vw]\">\r\n      <div className=\"h-full p-[36px]\">\r\n        <div className=\"flex items-center mb-16 gap-x-3 \">\r\n          <button\r\n            type=\"button\"\r\n            className=\"rounded-full hover:bg-gray-900 p-2\"\r\n            onClick={onCloseClick}\r\n          >\r\n            <AiOutlineClose size=\"24px\" className=\"fill-gray-400\" />\r\n          </button>\r\n          <span className=\"font-bold text-2xl\">\r\n            {isLogin ? \"Login to texter\" : \"Create your account\"}\r\n          </span>\r\n        </div>\r\n        <Form\r\n          className=\"max-w-[480px]\"\r\n          method=\"post\"\r\n          action={`${location.pathname}${location.search}`}\r\n        >\r\n          <div className=\"mb-6\">\r\n            <TexterInput\r\n              name=\"username\"\r\n              type=\"text\"\r\n              label=\"Username\"\r\n              placeholder=\"Name\"\r\n              autoFocus\r\n              error={typeof actionData?.userNameError === \"string\"}\r\n              errorMessage={actionData?.userNameError ?? undefined}\r\n            />\r\n          </div>\r\n          <div className=\"mb-8\">\r\n            <TexterInput\r\n              name=\"password\"\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              placeholder=\"password\"\r\n              error={typeof actionData?.passwordError === \"string\"}\r\n              errorMessage={actionData?.passwordError ?? undefined}\r\n            />\r\n          </div>\r\n          <button\r\n            className=\"rounded-full bg-texter-blue w-full px-4 py-3 hover:bg-texter-blue-dark\"\r\n            type=\"submit\"\r\n            name=\"actionType\"\r\n            value={actionType}\r\n          >\r\n            Login\r\n          </button>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n", "export default {'version':'b96ff4b4','entry':{'module':'/build/entry.client-UO7KUFAR.js','imports':['/build/_shared/chunk-NPBQ2ZCD.js','/build/_shared/chunk-3DG7SVQU.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-ITSXM7ZE.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar':{'id':'routes/__navbar','parentId':'root','path':undefined,'index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar-CPSQS3XZ.js','imports':['/build/_shared/chunk-2K7FUGOX.js','/build/_shared/chunk-DN27E22N.js','/build/_shared/chunk-HV32UKZL.js','/build/_shared/chunk-ZELMLF5Q.js','/build/_shared/chunk-GFYRDC4I.js','/build/_shared/chunk-TARWF57N.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user':{'id':'routes/__navbar/$user','parentId':'routes/__navbar','path':':user','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user-N2JJCSBM.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user.tweets.$tweetId':{'id':'routes/__navbar/$user.tweets.$tweetId','parentId':'routes/__navbar','path':':user/tweets/:tweetId','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user.tweets.$tweetId-MFOOSULY.js','imports':['/build/_shared/chunk-SSJXAUTN.js','/build/_shared/chunk-Z4E5AVV6.js','/build/_shared/chunk-WQ5HYYS2.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user/index':{'id':'routes/__navbar/$user/index','parentId':'routes/__navbar/$user','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user/index-VIRO7EHK.js','imports':['/build/_shared/chunk-Z4E5AVV6.js','/build/_shared/chunk-WQ5HYYS2.js','/build/_shared/chunk-DN27E22N.js','/build/_shared/chunk-HV32UKZL.js','/build/_shared/chunk-ZELMLF5Q.js','/build/_shared/chunk-GFYRDC4I.js','/build/_shared/chunk-TARWF57N.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user/likes':{'id':'routes/__navbar/$user/likes','parentId':'routes/__navbar/$user','path':'likes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user/likes-FGSHKDEH.js','imports':['/build/_shared/chunk-Z4E5AVV6.js','/build/_shared/chunk-WQ5HYYS2.js','/build/_shared/chunk-DN27E22N.js','/build/_shared/chunk-HV32UKZL.js','/build/_shared/chunk-ZELMLF5Q.js','/build/_shared/chunk-GFYRDC4I.js','/build/_shared/chunk-TARWF57N.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user/tweets/$tweetId/bookmark':{'id':'routes/__navbar/$user/tweets/$tweetId/bookmark','parentId':'routes/__navbar/$user','path':'tweets/:tweetId/bookmark','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user/tweets/$tweetId/bookmark-RTUZ7ZBL.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user/tweets/$tweetId/like':{'id':'routes/__navbar/$user/tweets/$tweetId/like','parentId':'routes/__navbar/$user','path':'tweets/:tweetId/like','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user/tweets/$tweetId/like-LFLBVPID.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/$user/with_replies':{'id':'routes/__navbar/$user/with_replies','parentId':'routes/__navbar/$user','path':'with_replies','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/$user/with_replies-RPPRFTN2.js','imports':['/build/_shared/chunk-Z4E5AVV6.js','/build/_shared/chunk-WQ5HYYS2.js','/build/_shared/chunk-DN27E22N.js','/build/_shared/chunk-HV32UKZL.js','/build/_shared/chunk-ZELMLF5Q.js','/build/_shared/chunk-GFYRDC4I.js','/build/_shared/chunk-TARWF57N.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/bookmarks':{'id':'routes/__navbar/bookmarks','parentId':'routes/__navbar','path':'bookmarks','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/bookmarks-LYJABZAG.js','imports':['/build/_shared/chunk-Z4E5AVV6.js','/build/_shared/chunk-WQ5HYYS2.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/edit-profile':{'id':'routes/__navbar/edit-profile','parentId':'routes/__navbar','path':'edit-profile','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__navbar/edit-profile-IXRLY5V3.js','imports':['/build/_shared/chunk-QIXHYK6Y.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__navbar/index':{'id':'routes/__navbar/index','parentId':'routes/__navbar','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/__navbar/index-24XLZ5UX.js','imports':['/build/_shared/chunk-SSJXAUTN.js','/build/_shared/chunk-Z4E5AVV6.js','/build/_shared/chunk-WQ5HYYS2.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/join':{'id':'routes/join','parentId':'root','path':'join','index':undefined,'caseSensitive':undefined,'module':'/build/routes/join-6MGBLYNH.js','imports':['/build/_shared/chunk-2K7FUGOX.js','/build/_shared/chunk-QIXHYK6Y.js','/build/_shared/chunk-WQ5HYYS2.js','/build/_shared/chunk-HV32UKZL.js','/build/_shared/chunk-GFYRDC4I.js','/build/_shared/chunk-TARWF57N.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-MDHE4BTI.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-B96FF4B4.js'};", "\nimport * as entryServer from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\root.tsx\";\nimport * as route1 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar.tsx\";\nimport * as route2 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user.tweets.$tweetId.tsx\";\nimport * as route3 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\edit-profile.tsx\";\nimport * as route4 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\bookmarks.tsx\";\nimport * as route5 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user.tsx\";\nimport * as route6 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user\\\\tweets\\\\$tweetId\\\\bookmark.ts\";\nimport * as route7 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user\\\\tweets\\\\$tweetId\\\\like.ts\";\nimport * as route8 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user\\\\with_replies.tsx\";\nimport * as route9 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user\\\\index.tsx\";\nimport * as route10 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\$user\\\\likes.tsx\";\nimport * as route11 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\__navbar\\\\index.tsx\";\nimport * as route12 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\logout.tsx\";\nimport * as route13 from \"C:\\\\Users\\\\nivek\\\\Documents\\\\work\\\\texter\\\\app\\\\routes\\\\join.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/__navbar\": {\n      id: \"routes/__navbar\",\n      parentId: \"root\",\n      path: undefined,\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/__navbar/$user.tweets.$tweetId\": {\n      id: \"routes/__navbar/$user.tweets.$tweetId\",\n      parentId: \"routes/__navbar\",\n      path: \":user/tweets/:tweetId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/__navbar/edit-profile\": {\n      id: \"routes/__navbar/edit-profile\",\n      parentId: \"routes/__navbar\",\n      path: \"edit-profile\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/__navbar/bookmarks\": {\n      id: \"routes/__navbar/bookmarks\",\n      parentId: \"routes/__navbar\",\n      path: \"bookmarks\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/__navbar/$user\": {\n      id: \"routes/__navbar/$user\",\n      parentId: \"routes/__navbar\",\n      path: \":user\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/__navbar/$user/tweets/$tweetId/bookmark\": {\n      id: \"routes/__navbar/$user/tweets/$tweetId/bookmark\",\n      parentId: \"routes/__navbar/$user\",\n      path: \"tweets/:tweetId/bookmark\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/__navbar/$user/tweets/$tweetId/like\": {\n      id: \"routes/__navbar/$user/tweets/$tweetId/like\",\n      parentId: \"routes/__navbar/$user\",\n      path: \"tweets/:tweetId/like\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/__navbar/$user/with_replies\": {\n      id: \"routes/__navbar/$user/with_replies\",\n      parentId: \"routes/__navbar/$user\",\n      path: \"with_replies\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/__navbar/$user/index\": {\n      id: \"routes/__navbar/$user/index\",\n      parentId: \"routes/__navbar/$user\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/__navbar/$user/likes\": {\n      id: \"routes/__navbar/$user/likes\",\n      parentId: \"routes/__navbar/$user\",\n      path: \"likes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/__navbar/index\": {\n      id: \"routes/__navbar/index\",\n      parentId: \"routes/__navbar\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/join\": {\n      id: \"routes/join\",\n      parentId: \"root\",\n      path: \"join\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    }\n  };"],
  "mappings": "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",
  "names": []
}
